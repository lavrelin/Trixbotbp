#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import random
import asyncio
import json
from datetime import datetime, timedelta
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler,
    filters
)
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from dotenv import load_dotenv

load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [7811593067]  # ID –∞–¥–º–∏–Ω–æ–≤
MODERATION_GROUP_ID = -1002734837434  # ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏

# ============= –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï =============

# –°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"
word_games = {
    'play3xia': {
        'words': {}, 
        'current_word': None, 
        'active': False, 
        'winners': [], 
        'interval': 60,
        'description': '–ö–æ–Ω–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        'media_url': None
    },
    'play3x': {
        'words': {}, 
        'current_word': None, 
        'active': False, 
        'winners': [], 
        'interval': 60,
        'description': '–ö–æ–Ω–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        'media_url': None
    },
    'playxxx': {
        'words': {}, 
        'current_word': None, 
        'active': False, 
        'winners': [], 
        'interval': 60,
        'description': '–ö–æ–Ω–∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        'media_url': None
    }
}

user_attempts = {}  # {user_id: {game_version: last_attempt_time}}

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–æ–º–µ—Ä–æ–≤
roll_games = {
    'play3xia': {'participants': {}, 'active': True},
    'play3x': {'participants': {}, 'active': True},
    'playxxx': {'participants': {}, 'active': True}
}

# –°—Å—ã–ª–∫–∏
trix_links = [
    {'id': 1, 'name': '–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/snghu', 'description': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'},
    {'id': 2, 'name': '–ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/tgchatxxx', 'description': '–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è'},
    {'id': 3, 'name': '–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', 'url': 'https://t.me/trixvault', 'description': '–ö–∞—Ç–∞–ª–æ–≥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'},
    {'id': 4, 'name': '–ë–∞—Ä–∞—Ö–æ–ª–∫–∞', 'url': 'https://t.me/hungarytrade', 'description': '–ö—É–ø–ª—è, –ø—Ä–æ–¥–∞–∂–∞, –æ–±–º–µ–Ω'}
]

# –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π)
lottery_participants = {}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
waiting_users = {}

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_data = {}  # {user_id: {username, join_date, last_activity, message_count, banned, muted_until}}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
chat_settings = {
    'slowmode': 0,
    'antiinvite': False,
    'lockdown': False,
    'flood_limit': 0
}

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
autopost_data = {
    'enabled': False,
    'message': '',
    'interval': 3600,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    'last_post': None
}

# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

def get_game_version(command):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    if 'play3xia' in command:
        return 'play3xia'
    elif 'play3x' in command:
        return 'play3x'
    elif 'playxxx' in command:
        return 'playxxx'
    return 'play3xia'

def can_attempt(user_id, game_version):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if user_id not in user_attempts:
        return True
    if game_version not in user_attempts[user_id]:
        return True
    
    last_attempt = user_attempts[user_id][game_version]
    interval_minutes = word_games[game_version]['interval']
    return datetime.now() - last_attempt >= timedelta(minutes=interval_minutes)

def record_attempt(user_id, game_version):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_attempts:
        user_attempts[user_id] = {}
    user_attempts[user_id][game_version] = datetime.now()

def normalize_word(word):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return word.lower().strip().replace('—ë', '–µ')

def update_user_activity(user_id, username=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'username': username or f'ID_{user_id}',
            'join_date': datetime.now(),
            'last_activity': datetime.now(),
            'message_count': 0,
            'banned': False,
            'muted_until': None
        }
    else:
        user_data[user_id]['last_activity'] = datetime.now()
        if username:
            user_data[user_id]['username'] = username
    
    user_data[user_id]['message_count'] += 1

def is_user_banned(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return user_data.get(user_id, {}).get('banned', False)

def is_user_muted(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if user_id not in user_data:
        return False
    
    muted_until = user_data[user_id].get('muted_until')
    if not muted_until:
        return False
    
    if datetime.now() < muted_until:
        return True
    else:
        user_data[user_id]['muted_until'] = None
        return False

def parse_time(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10m, 1h, 1d"""
    if not time_str:
        return None
    
    time_str = time_str.lower()
    multiplier = 1
    
    if time_str.endswith('m'):
        multiplier = 60
        time_str = time_str[:-1]
    elif time_str.endswith('h'):
        multiplier = 3600
        time_str = time_str[:-1]
    elif time_str.endswith('d'):
        multiplier = 86400
        time_str = time_str[:-1]
    
    try:
        return int(time_str) * multiplier
    except ValueError:
        return None

async def check_user_membership(context, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–ª–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        member = await context.bot.get_chat_member(chat_id=MODERATION_GROUP_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except:
        return False

# ============= –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ =============

async def start_command(update, context):
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")]
    ]
    
    text = """üóØÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrixBot!*

*–¢—Ä–∏–∫—Å* ‚Äì —ç—Ç–æ –≥–∏–¥ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É –∏ –í–µ–Ω–≥—Ä–∏–∏.

*–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:*
üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏
üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* - –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è  
üôÖ *–ö–∞—Ç–∞–ª–æ–≥* - —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —É—Å–ª—É–≥
üïµÔ∏è‚Äç‚ôÇÔ∏è *–ë–∞—Ä–∞—Ö–æ–ª–∫–∞* - –∫—É–ø–ª—è/–ø—Ä–æ–¥–∞–∂–∞/–æ–±–º–µ–Ω

*–ö–æ–º–∞–Ω–¥—ã:* /admin, /trixlinks, /join, /participants, /report
*–ò–≥—Ä—ã:* play3xia, play3x, playxxx (—Å–º. /admin –¥–ª—è —Å–ø–∏—Å–∫–∞)

‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ ‚Ä¢ üéØ –£–¥–æ–±–Ω–æ ‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ"""
    
    user = update.effective_user
    update_user_activity(user.id, user.username)
    
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def id_command(update, context):
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"""üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**

üë§ –í–∞—à ID: `{user.id}`"""
    
    if chat.type != 'private':
        text += f"""
üí¨ ID —á–∞—Ç–∞: `{chat.id}`
üìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"""
        
        if chat.title:
            text += f"""
üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"""
    
    update_user_activity(user.id, user.username)
    await update.message.reply_text(text, parse_mode='Markdown')

async def whois_command(update, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/whois @username` –∏–ª–∏ `/whois ID`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    if target.startswith('@'):
        target = target[1:]
        # –ü–æ–∏—Å–∫ –ø–æ username
        target_id = None
        for uid, data in user_data.items():
            if data['username'].lower() == target.lower():
                target_id = uid
                break
        
        if target_id:
            data = user_data[target_id]
            text = f"""üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{target}:**

üÜî ID: `{target_id}`
üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {data['join_date'].strftime('%d.%m.%Y %H:%M')}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_activity'].strftime('%d.%m.%Y %H:%M')}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}
üö´ –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞: {'–ó–∞–±–∞–Ω–µ–Ω' if data.get('banned') else '–ê–∫—Ç–∏–≤–µ–Ω'}
üîá –ú—É—Ç: {'–î–∞' if is_user_muted(target_id) else '–ù–µ—Ç'}"""
        else:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
    elif target.isdigit():
        user_id = int(target)
        if user_id in user_data:
            data = user_data[user_id]
            text = f"""üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**

üÜî ID: `{user_id}`
üë§ Username: @{data['username']}
üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {data['join_date'].strftime('%d.%m.%Y %H:%M')}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_activity'].strftime('%d.%m.%Y %H:%M')}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {data['message_count']}
üö´ –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞: {'–ó–∞–±–∞–Ω–µ–Ω' if data.get('banned') else '–ê–∫—Ç–∏–≤–µ–Ω'}
üîá –ú—É—Ç: {'–î–∞' if is_user_muted(user_id) else '–ù–µ—Ç'}"""
        else:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    else:
        text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def join_command(update, context):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    update_user_activity(user_id, update.effective_user.username)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if user_id in lottery_participants:
        await update.message.reply_text(f"üé≤ @{username}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
        return
    
    lottery_participants[user_id] = {
        'username': username,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"üéâ @{username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}"
    )

async def participants_command(update, context):
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if not lottery_participants:
        await update.message.reply_text("üé≤ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return
    
    text = f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ({len(lottery_participants)}):**\n\n"
    
    for i, (user_id, data) in enumerate(lottery_participants.items(), 1):
        text += f"{i}. @{data['username']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def report_command(update, context):
    """–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/report @username –ø—Ä–∏—á–∏–Ω–∞`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    reporter = update.effective_user
    update_user_activity(reporter.id, reporter.username)
    
    report_text = (
        f"üö® **–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:**\n\n"
        f"üë§ –û—Ç: @{reporter.username or '–±–µ–∑_username'} (ID: {reporter.id})\n"
        f"üéØ –ù–∞: {target}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=MODERATION_GROUP_ID,
            text=report_text,
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            "‚úÖ **–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã")

async def trixlinks_command(update, context):
    text = "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**\n\n"
    
    for i, link in enumerate(trix_links, 1):
        text += f"{i}. **{link['name']}**\n"
        text += f"üîó {link['url']}\n"
        text += f"üìù {link['description']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinksadd_command(update, context):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/trixlinksadd \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–æ–ø–∏—Å–∞–Ω–∏–µ\"`\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            parse_mode='Markdown'
        )
        return
    
    name = context.args[0].strip('"')
    description = ' '.join(context.args[1:]).strip('"')
    
    waiting_users[update.effective_user.id] = {
        'action': 'add_link',
        'name': name,
        'description': description
    }
    
    await update.message.reply_text(
        f"‚úÖ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîó **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**",
        parse_mode='Markdown'
    )

async def trixlinksedit_command(update, context):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–û–ö**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksedit ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    link_to_edit = next((link for link in trix_links if link['id'] == link_id), None)
    
    if not link_to_edit:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    waiting_users[update.effective_user.id] = {
        'action': 'edit_link',
        'link_id': link_id
    }
    
    await update.message.reply_text(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ID {link_id}:**\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link_to_edit['name']}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {link_to_edit['description']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link_to_edit['url']}\n\n"
        f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
        f"`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`",
        parse_mode='Markdown'
    )

async def trixlinksdelete_command(update, context):
    """–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        text = "üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –°–°–´–õ–û–ö**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksdelete ID`\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    
    for i, link in enumerate(trix_links):
        if link['id'] == link_id:
            deleted_link = trix_links.pop(i)
            await update.message.reply_text(
                f"‚úÖ **–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:**\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {deleted_link['name']}\n"
                f"üîó URL: {deleted_link['url']}",
                parse_mode='Markdown'
            )
            return
    
    await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def say_command(update, context):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /say:**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/say –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/say 123456789 –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`\n"
            "‚Ä¢ `/say ID_123456789 –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    message = ' '.join(context.args[1:])
    
    target_user_id = None
    
    if target.startswith('ID_'):
        try:
            target_user_id = int(target[3:])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    elif target.isdigit():
        target_user_id = int(target)
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç ID_123456789")
        return
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message[:100]}{'...' if len(message) > 100 else ''}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        error_msg = str(e)
        if "bot was blocked" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")

# ============= –ú–û–î–ï–†–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def ban_command(update, context):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ban @username –ø—Ä–∏—á–∏–Ω–∞`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        username = target[1:]
        for uid, data in user_data.items():
            if data['username'].lower() == username.lower():
                target_id = uid
                break
    elif target.isdigit():
        target_id = int(target)
    
    if target_id and target_id in user_data:
        user_data[target_id]['banned'] = True
        
        await update.message.reply_text(
            f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            await context.bot.send_message(
                chat_id=MODERATION_GROUP_ID,
                text=f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω:**\n\n"
                     f"üë§ {target} (ID: {target_id})\n"
                     f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                     f"üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{update.effective_user.username}",
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def unmute_command(update, context):
    """–°–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unmute @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        username = target[1:]
        for uid, data in user_data.items():
            if data['username'].lower() == username.lower():
                target_id = uid
                break
    elif target.isdigit():
        target_id = int(target)
    
    if target_id and target_id in user_data:
        user_data[target_id]['muted_until'] = None
        
        await update.message.reply_text(
            f"üîä **–ú—É—Ç —Å–Ω—è—Ç:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def banlist_command(update, context):
    """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    banned_users = [data for data in user_data.values() if data.get('banned')]
    
    if not banned_users:
        await update.message.reply_text("üìù **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç**")
        return
    
    text = f"üö´ **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):**\n\n"
    
    for i, user in enumerate(banned_users, 1):
        text += f"{i}. @{user['username']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for data in user_data.values() if 
                      datetime.now() - data['last_activity'] <= timedelta(days=1))
    total_messages = sum(data['message_count'] for data in user_data.values())
    banned_count = sum(1 for data in user_data.values() if data.get('banned'))
    
    text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}
üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def top_command(update, context):
    """–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not user_data:
        await update.message.reply_text("üìù **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö**")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['message_count'], reverse=True)[:10]
    
    text = "üèÜ **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    
    for i, (user_id, data) in enumerate(sorted_users, 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        text += f"{emoji} @{data['username']} - {data['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def lastseen_command(update, context):
    """–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/lastseen @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        username = target[1:]
        for uid, data in user_data.items():
            if data['username'].lower() == username.lower():
                target_id = uid
                break
    elif target.isdigit():
        target_id = int(target)
    
    if target_id and target_id in user_data:
        data = user_data[target_id]
        last_seen = data['last_activity']
        time_diff = datetime.now() - last_seen
        
        if time_diff.seconds < 60:
            time_str = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif time_diff.seconds < 3600:
            time_str = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        elif time_diff.days == 0:
            time_str = f"{time_diff.seconds // 3600} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        else:
            time_str = f"{time_diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        
        await update.message.reply_text(
            f"üë§ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {target}:**\n\n"
            f"‚è∞ {last_seen.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïê {time_str}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ============= –ê–í–¢–û–ü–û–°–¢–ò–ù–ì =============

async def autopost_command(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        status = "–≤–∫–ª—é—á–µ–Ω" if autopost_data['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        text = f"""‚öôÔ∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {status}**

üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {autopost_data['message'] or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {autopost_data['interval']} —Å–µ–∫—É–Ω–¥
üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {autopost_data['last_post'].strftime('%d.%m.%Y %H:%M') if autopost_data['last_post'] else '–Ω–∏–∫–æ–≥–¥–∞'}

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/autopost "—Ç–µ–∫—Å—Ç" –∏–Ω—Ç–µ—Ä–≤–∞–ª` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
‚Ä¢ `/autopost on/off` - –≤–∫–ª/–≤—ã–∫–ª
‚Ä¢ `/autopost edit "–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"` - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ `/autopost interval —Å–µ–∫—É–Ω–¥—ã` - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    action = context.args[0].lower()
    
    if action == 'on':
        autopost_data['enabled'] = True
        await update.message.reply_text("‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
    
    elif action == 'off':
        autopost_data['enabled'] = False
        await update.message.reply_text("‚ùå **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω**", parse_mode='Markdown')
    
    elif action == 'edit' and len(context.args) > 1:
        new_text = ' '.join(context.args[1:]).strip('"')
        autopost_data['message'] = new_text
        await update.message.reply_text(f"‚úÖ **–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω:**\n{new_text}", parse_mode='Markdown')
    
    elif action == 'interval' and len(context.args) > 1 and context.args[1].isdigit():
        new_interval = int(context.args[1])
        autopost_data['interval'] = new_interval
        await update.message.reply_text(f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥**", parse_mode='Markdown')
    
    elif len(context.args) >= 2:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if context.args[-1].isdigit():
            interval = int(context.args[-1])
            message = ' '.join(context.args[:-1]).strip('"')
        else:
            interval = 3600
            message = ' '.join(context.args).strip('"')
        
        autopost_data['message'] = message
        autopost_data['interval'] = interval
        autopost_data['enabled'] = True
        
        await update.message.reply_text(
            f"‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:**\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥",
            parse_mode='Markdown'
        )

async def admin_command(update, context):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = """üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:**

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
‚Ä¢ `/say ID —Å–æ–æ–±—â–µ–Ω–∏–µ` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ `/id` - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
‚Ä¢ `/whois @user` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

**–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
‚Ä¢ `/ban @user –ø—Ä–∏—á–∏–Ω–∞` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `/unban @user` - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `/mute @user –≤—Ä–µ–º—è` - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç (10m, 1h, 1d)
‚Ä¢ `/unmute @user` - —Å–Ω—è—Ç—å –º—É—Ç
‚Ä¢ `/banlist` - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
‚Ä¢ `/top` - —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/lastseen @user` - –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

**–°—Å—ã–ª–∫–∏:**
‚Ä¢ `/trixlinks` - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
‚Ä¢ `/trixlinksadd "–Ω–∞–∑–≤–∞–Ω–∏–µ" "–æ–ø–∏—Å–∞–Ω–∏–µ"` - –¥–æ–±–∞–≤–∏—Ç—å
‚Ä¢ `/trixlinksedit ID` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `/trixlinksdelete ID` - —É–¥–∞–ª–∏—Ç—å

**–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:**
‚Ä¢ `/autopost "—Ç–µ–∫—Å—Ç" –∏–Ω—Ç–µ—Ä–≤–∞–ª` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
‚Ä¢ `/autopost on/off` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å

**–ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ":**
‚Ä¢ `/play3xiawordadd —Å–ª–æ–≤–æ` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/play3xiawordon` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/play3xiawordoff` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/play3xiawordinfo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ
‚Ä¢ `/play3xiawordinfoedit —Ç–µ–∫—Å—Ç` - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ `/play3xiaanstimeset –º–∏–Ω—É—Ç—ã` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫
‚Ä¢ `/play3xiagamesinfo` - –∏–Ω—Ñ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/play3xiaadmgamesinfo` - –∏–Ω—Ñ–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

**–†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:**
‚Ä¢ `/play3xiaroll 3` - –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (1-5 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π)
‚Ä¢ `/play3xiarollreset` - —Å–±—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/play3xiarollstatus` - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/play3xiamynumber` - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞

**–û–±—ã—á–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à:**
‚Ä¢ `/join` - –≤–æ–π—Ç–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à
‚Ä¢ `/participants` - —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞

**–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ `/report @user –ø—Ä–∏—á–∏–Ω–∞` - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
‚Ä¢ `/play3xiasay —Å–ª–æ–≤–æ` - —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/play3xiaroll 9999` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

# ============= –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ =============

async def wordadd_command(update, context):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordadd —Å–ª–æ–≤–æ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    word = context.args[0].lower()
    
    word_games[game_version]['words'][word] = {
        'description': f'–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {word}',
        'hints': []
    }
    
    await update.message.reply_text(
        f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–≥—Ä—É {game_version}:**\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}",
        parse_mode='Markdown'
    )

async def wordedit_command(update, context):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    if not context.args:
        words_list = list(word_games[game_version]['words'].keys())
        if not words_list:
            await update.message.reply_text(f"‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_version}")
            return
        
        text = f"üìù **–°–ª–æ–≤–∞ –≤ –∏–≥—Ä–µ {game_version}:**\n\n"
        for i, word in enumerate(words_list, 1):
            text += f"{i}. {word}\n"
        text += f"\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/{game_version}wordedit —Å–ª–æ–≤–æ`"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    word = context.args[0].lower()
    
    if word in word_games[game_version]['words']:
        waiting_users[update.effective_user.id] = {
            'action': 'edit_word',
            'game_version': game_version,
            'word': word
        }
        
        await update.message.reply_text(
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' –¥–ª—è {game_version}:**\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version}")

async def wordon_command(update, context):
    """–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    if not word_games[game_version]['words']:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_version}")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    current_word = random.choice(list(word_games[game_version]['words'].keys()))
    word_games[game_version]['current_word'] = current_word
    word_games[game_version]['active'] = True
    word_games[game_version]['winners'] = []
    word_games[game_version]['description'] = f"üéÆ –ö–æ–Ω–∫—É—Ä—Å –∞–∫—Ç–∏–≤–µ–Ω! –£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /{game_version}say"
    
    await update.message.reply_text(
        f"üéÆ **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ù–ê–ß–ê–õ–°–Ø!**\n\n"
        f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/{game_version}say —Å–ª–æ–≤–æ` –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {word_games[game_version]['interval']} –º–∏–Ω—É—Ç",
        parse_mode='Markdown'
    )

async def wordoff_command(update, context):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    winners = word_games[game_version]['winners']
    
    if winners:
        winner_list = ", ".join([f"@{winner}" for winner in winners])
        word_games[game_version]['description'] = f"üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner_list}. –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word}"
    else:
        word_games[game_version]['description'] = f"–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}"
    
    await update.message.reply_text(
        f"üõë **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
        f"üéØ –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}",
        parse_mode='Markdown'
    )

async def wordinfo_command(update, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ"""
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    game_data = word_games[game_version]
    
    text = f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ {game_version}:**\n\n"
    text += f"üìù {game_data['description']}\n\n"
    
    if game_data['active']:
        text += f"üéÆ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
        text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫: {game_data['interval']} –º–∏–Ω—É—Ç\n"
        text += f"üéØ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è: `/{game_version}say —Å–ª–æ–≤–æ`"
    else:
        text += f"üéÆ –°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def wordinfoedit_command(update, context):
    """–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordinfoedit –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    new_description = ' '.join(context.args)
    
    word_games[game_version]['description'] = new_description
    
    await update.message.reply_text(
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ {game_version} –∏–∑–º–µ–Ω–µ–Ω–æ:**\n\n{new_description}",
        parse_mode='Markdown'
    )

async def anstimeset_command(update, context):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaanstimeset 60`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    minutes = int(context.args[0])
    
    word_games[game_version]['interval'] = minutes
    
    await update.message.reply_text(
        f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {game_version}: {minutes} –º–∏–Ω—É—Ç**",
        parse_mode='Markdown'
    )

async def gamesinfo_command(update, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    text = f"""üéÆ **–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã {game_version}:**

**–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:**
‚Ä¢ `/{game_version}say —Å–ª–æ–≤–æ` - –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å
‚Ä¢ `/{game_version}wordinfo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ

**–†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:**
‚Ä¢ `/{game_version}roll 9999` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
‚Ä¢ `/{game_version}mynumber` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä

**–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/join` - –≤–æ–π—Ç–∏ –≤ –æ–±—ã—á–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
‚Ä¢ `/participants` - —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
‚Ä¢ `/report @user –ø—Ä–∏—á–∏–Ω–∞` - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è

‚ÑπÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π: play3xia, play3x, playxxx"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def admgamesinfo_command(update, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    text = f"""üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã {game_version}:**

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏:**
‚Ä¢ `/{game_version}wordadd —Å–ª–æ–≤–æ` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/{game_version}wordedit —Å–ª–æ–≤–æ` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/{game_version}wordon` - –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/{game_version}wordoff` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/{game_version}wordinfoedit —Ç–µ–∫—Å—Ç` - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ `/{game_version}anstimeset –º–∏–Ω—É—Ç—ã` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫

**–†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:**
‚Ä¢ `/{game_version}roll [1-5]` - –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
‚Ä¢ `/{game_version}rollreset` - —Å–±—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/{game_version}rollstatus` - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/{game_version}say —Å–ª–æ–≤–æ` - –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å
‚Ä¢ `/{game_version}wordinfo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ
‚Ä¢ `/{game_version}roll 9999` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
‚Ä¢ `/{game_version}mynumber` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def game_say_command(update, context):
    """–ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"""
    user_id = update.effective_user.id
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiasay —Å–ª–æ–≤–æ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    username = update.effective_user.username or f"ID_{user_id}"
    guess = context.args[0]
    
    update_user_activity(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    if not word_games[game_version]['active']:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω–∫—É—Ä—Å {game_version} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if not can_attempt(user_id, game_version):
        interval = word_games[game_version]['interval']
        await update.message.reply_text(f"‚è∞ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑ –≤ {interval} –º–∏–Ω—É—Ç")
        return
    
    record_attempt(user_id, game_version)
    current_word = word_games[game_version]['current_word']
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=MODERATION_GROUP_ID,
            text=f"üéÆ **–ò–≥—Ä–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ {game_version}:**\n\n"
                 f"üë§ @{username} (ID: {user_id})\n"
                 f"üéØ –ü–æ–ø—ã—Ç–∫–∞: {guess}\n"
                 f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_word}",
            parse_mode='Markdown'
        )
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if normalize_word(guess) == normalize_word(current_word):
        word_games[game_version]['winners'].append(username)
        word_games[game_version]['active'] = False
        word_games[game_version]['description'] = f"üèÜ @{username} —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å."
        
        await update.message.reply_text(
            f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**\n\n"
            f"@{username}, –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!\n\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–±–µ–¥–µ
        try:
            await context.bot.send_message(
                chat_id=MODERATION_GROUP_ID,
                text=f"üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í –ò–ì–†–ï {game_version}!**\n\n"
                     f"üë§ @{username} (ID: {user_id})\n"
                     f"üéØ –£–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {current_word}",
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {word_games[game_version]['interval']} –º–∏–Ω—É—Ç")

# ============= –†–û–ó–´–ì–†–´–® –ù–û–ú–ï–†–û–í =============

async def roll_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /roll - –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    update_user_activity(user_id, update.effective_user.username)
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Å —á–∏—Å–ª–æ–º 1-5 = –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    if (user_id in ADMIN_IDS and context.args and 
        len(context.args) == 1 and context.args[0].isdigit() and 
        1 <= int(context.args[0]) <= 5):
        
        winners_count = int(context.args[0])
        participants = roll_games[game_version]['participants']
        
        if len(participants) < winners_count:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {winners_count} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9999
        target_number = random.randint(1, 9999)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –Ω–æ–º–µ—Ä–∞
        numbers_with_distance = []
        for uid, data in participants.items():
            distance = abs(data['number'] - target_number)
            numbers_with_distance.append((distance, uid, data['number'], data['username']))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        numbers_with_distance.sort(key=lambda x: x[0])
        winners = numbers_with_distance[:winners_count]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
        winners_text = []
        for i, (distance, uid, number, username) in enumerate(winners, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            winners_text.append(f"{emoji} @{username} (–Ω–æ–º–µ—Ä {number})")
        
        result_text = (
            f"üéâ **–†–û–ó–´–ì–†–´–® {game_version} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
            f"üé≤ –í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: {target_number}\n\n"
            f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n"
            f"{chr(10).join(winners_text)}\n\n"
            f"üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
        )
        
        await update.message.reply_text(result_text, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            await context.bot.send_message(
                chat_id=MODERATION_GROUP_ID,
                text=f"üé≤ **–†–æ–∑—ã–≥—Ä—ã—à {game_version} –ø—Ä–æ–≤–µ–¥–µ–Ω:**\n\n"
                     f"üéØ –ß–∏—Å–ª–æ: {target_number}\n"
                     f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}\n"
                     f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–æ: {len(participants)}",
                parse_mode='Markdown'
            )
        except:
            pass
        
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 9999 = –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    if context.args and context.args[0] == '9999':
        username = update.effective_user.username or f"ID_{user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
        if not await check_user_membership(context, user_id):
            await update.message.reply_text(
                "‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in roll_games[game_version]['participants']:
            existing_number = roll_games[game_version]['participants'][user_id]['number']
            await update.message.reply_text(
                f"üé≤ @{username}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä: **{existing_number}**",
                parse_mode='Markdown'
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
        existing_numbers = set(data['number'] for data in roll_games[game_version]['participants'].values())
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
        for _ in range(100):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            new_number = random.randint(1, 9999)
            if new_number not in existing_numbers:
                break
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        roll_games[game_version]['participants'][user_id] = {
            'username': username,
            'number': new_number,
            'joined_at': datetime.now()
        }
        
        await update.message.reply_text(
            f"üé≤ @{username}, –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: **{new_number}**",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            await context.bot.send_message(
                chat_id=MODERATION_GROUP_ID,
                text=f"üé≤ **–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {game_version}:**\n\n"
                     f"üë§ @{username} (ID: {user_id})\n"
                     f"üéØ –ù–æ–º–µ—Ä: {new_number}",
                parse_mode='Markdown'
            )
        except:
            pass
        
        return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if user_id in ADMIN_IDS:
        await update.message.reply_text(
            f"üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /{game_version}roll:**\n\n"
            f"**–î–ª—è –∞–¥–º–∏–Ω–æ–≤:**\n"
            f"‚Ä¢ `/{game_version}roll [1-5]` - –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à\n\n"
            f"**–î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
            f"‚Ä¢ `/{game_version}roll 9999` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"üìù **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
            f"`/{game_version}roll 9999`",
            parse_mode='Markdown'
        )

async def rollreset_command(update, context):
    """–°–±—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    participants_count = len(roll_games[game_version]['participants'])
    roll_games[game_version]['participants'] = {}
    
    await update.message.reply_text(
        f"‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version} —Å–±—Ä–æ—à–µ–Ω—ã**\n\n"
        f"–ë—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}",
        parse_mode='Markdown'
    )

async def rollstatus_command(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    participants = roll_games[game_version]['participants']
    
    if not participants:
        await update.message.reply_text(f"üé≤ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version}")
        return
    
    text = f"üé≤ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version} ({len(participants)}):**\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º
    sorted_participants = sorted(participants.items(), key=lambda x: x[1]['number'])
    
    for user_id, data in sorted_participants:
        text += f"@{data['username']} - –Ω–æ–º–µ—Ä {data['number']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def mynumber_command(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    if user_id in roll_games[game_version]['participants']:
        number = roll_games[game_version]['participants'][user_id]['number']
        username = update.effective_user.username or f"ID_{user_id}"
        
        await update.message.reply_text(
            f"üé≤ @{username}, –≤–∞—à –Ω–æ–º–µ—Ä: **{number}**",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/{game_version}roll 9999` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞",
            parse_mode='Markdown'
        )

# ============= –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =============

async def handle_text_messages(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    update_user_activity(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –º—É—Ç
    if is_user_banned(user_id):
        try:
            await update.message.delete()
        except:
            pass
        return
    
    if is_user_muted(user_id):
        try:
            await update.message.delete()
            await update.message.reply_text("üîá –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ", disable_notification=True)
        except:
            pass
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    if user_id in waiting_users:
        action_data = waiting_users[user_id]
        
        if action_data['action'] == 'add_link':
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
            new_id = max([link['id'] for link in trix_links]) + 1 if trix_links else 1
            new_link = {
                'id': new_id,
                'name': action_data['name'],
                'url': text.strip(),
                'description': action_data['description']
            }
            trix_links.append(new_link)
            
            await update.message.reply_text(
                f"‚úÖ **–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"üÜî ID: {new_id}\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {new_link['name']}\n"
                f"üîó URL: {new_link['url']}\n"
                f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {new_link['description']}",
                parse_mode='Markdown'
            )
            
            del waiting_users[user_id]
            return
        
        elif action_data['action'] == 'edit_link':
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            parts = text.split(' | ')
            if len(parts) != 3:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞")
                return
            
            link_id = action_data['link_id']
            for link in trix_links:
                if link['id'] == link_id:
                    link['name'] = parts[0].strip()
                    link['description'] = parts[1].strip()
                    link['url'] = parts[2].strip()
                    
                    await update.message.reply_text(
                        f"‚úÖ **–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                        f"üÜî ID: {link_id}\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link['name']}\n"
                        f"üîó URL: {link['url']}\n"
                        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {link['description']}",
                        parse_mode='Markdown'
                    )
                    break
            
            del waiting_users[user_id]
            return
        
        elif action_data['action'] == 'edit_word':
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–∞
            game_version = action_data['game_version']
            word = action_data['word']
            
            word_games[game_version]['words'][word]['description'] = text.strip()
            
            await update.message.reply_text(
                f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {game_version}:**\n\n{text.strip()}",
                parse_mode='Markdown'
            )
            
            del waiting_users[user_id]
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞)
    if chat_settings.get('antiinvite') and ('t.me/' in text or 'telegram.me/' in text):
        if user_id not in ADMIN_IDS:
            try:
                await update.message.delete()
                await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã", disable_notification=True)
            except:
                pass
            return

async def autopost_task():
    """–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    while True:
        try:
            if (autopost_data['enabled'] and autopost_data['message'] and 
                (not autopost_data['last_post'] or 
                 datetime.now() - autopost_data['last_post'] >= timedelta(seconds=autopost_data['interval']))):
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞)
                # await bot.send_message(chat_id=CHAT_ID, text=autopost_data['message'])
                autopost_data['last_post'] = datetime.now()
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ autopost_task: {e}")
            await asyncio.sleep(60)

# ============= –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =============

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CommandHandler("whois", whois_command))
    application.add_handler(CommandHandler("join", join_command))
    application.add_handler(CommandHandler("participants", participants_command))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
    application.add_handler(CommandHandler("trixlinks", trixlinks_command))
    application.add_handler(CommandHandler("trixlinksadd", trixlinksadd_command))
    application.add_handler(CommandHandler("trixlinksedit", trixlinksedit_command))
    application.add_handler(CommandHandler("trixlinksdelete", trixlinksdelete_command))
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("say", say_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    application.add_handler(CommandHandler("banlist", banlist_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("top", top_command))
    application.add_handler(CommandHandler("lastseen", lastseen_command))
    
    # –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
    application.add_handler(CommandHandler("autopost", autopost_command))
    
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π (play3xia, play3x, playxxx)
    game_versions = ['play3xia', 'play3x', 'playxxx']
    
    for version in game_versions:
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞–º–∏
        application.add_handler(CommandHandler(f"{version}wordadd", wordadd_command))
        application.add_handler(CommandHandler(f"{version}wordedit", wordedit_command))
        application.add_handler(CommandHandler(f"{version}wordon", wordon_command))
        application.add_handler(CommandHandler(f"{version}wordoff", wordoff_command))
        application.add_handler(CommandHandler(f"{version}wordinfo", wordinfo_command))
        application.add_handler(CommandHandler(f"{version}wordinfoedit", wordinfoedit_command))
        application.add_handler(CommandHandler(f"{version}anstimeset", anstimeset_command))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler(f"{version}gamesinfo", gamesinfo_command))
        application.add_handler(CommandHandler(f"{version}admgamesinfo", admgamesinfo_command))
        
        # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler(f"{version}say", game_say_command))
        application.add_handler(CommandHandler(f"{version}roll", roll_command))
        application.add_handler(CommandHandler(f"{version}rollreset", rollreset_command))
        application.add_handler(CommandHandler(f"{version}rollstatus", rollstatus_command))
        application.add_handler(CommandHandler(f"{version}mynumber", mynumber_command))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(autopost_task())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=['message', 'callback_query'])

if __name__ == '__main__':
    main()–¥–µ–Ω")

async def unban_command(update, context):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unban @username`", parse_mode='Markdown')
        return
    
    target = context.args[0]
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        username = target[1:]
        for uid, data in user_data.items():
            if data['username'].lower() == username.lower():
                target_id = uid
                break
    elif target.isdigit():
        target_id = int(target)
    
    if target_id and target_id in user_data:
        user_data[target_id]['banned'] = False
        
        await update.message.reply_text(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def mute_command(update, context):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/mute @username –≤—Ä–µ–º—è` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)", parse_mode='Markdown')
        return
    
    target = context.args[0]
    time_str = context.args[1]
    
    seconds = parse_time(time_str)
    if not seconds:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 10m, 1h, 1d")
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_id = None
    if target.startswith('@'):
        username = target[1:]
        for uid, data in user_data.items():
            if data['username'].lower() == username.lower():
                target_id = uid
                break
    elif target.isdigit():
        target_id = int(target)
    
    if target_id and target_id in user_data:
        mute_until = datetime.now() + timedelta(seconds=seconds)
        user_data[target_id]['muted_until'] = mute_until
        
        await update.message.reply_text(
            f"üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω:**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
            f"‚è∞ –î–æ: {mute_until.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time_str}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π
