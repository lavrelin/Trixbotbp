#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import random
from datetime import datetime, timedelta
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler,
    filters
)
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [7811593067]  # ID –∞–¥–º–∏–Ω–æ–≤
MODERATION_GROUP_ID = -1002734837434  # ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏

# ============= –ò–ì–†–û–í–´–ï –î–ê–ù–ù–´–ï =============

# –°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"
word_games = {
    'play3xia': {'words': {}, 'current_word': None, 'active': False, 'winners': [], 'interval': 60},
    'play3x': {'words': {}, 'current_word': None, 'active': False, 'winners': [], 'interval': 60},
    'playxxx': {'words': {}, 'current_word': None, 'active': False, 'winners': [], 'interval': 60}
}

user_attempts = {}  # {user_id: {game_version: last_attempt_time}}

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–æ–º–µ—Ä–æ–≤
roll_games = {
    'play3xia': {'participants': {}, 'active': True},
    'play3x': {'participants': {}, 'active': True},
    'playxxx': {'participants': {}, 'active': True}
}

# –°—Å—ã–ª–∫–∏
trix_links = [
    {'id': 1, 'name': '–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/snghu', 'description': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'},
    {'id': 2, 'name': '–ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç', 'url': 'https://t.me/tgchatxxx', 'description': '–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è'},
    {'id': 3, 'name': '–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', 'url': 'https://t.me/trixvault', 'description': '–ö–∞—Ç–∞–ª–æ–≥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'},
    {'id': 4, 'name': '–ë–∞—Ä–∞—Ö–æ–ª–∫–∞', 'url': 'https://t.me/hungarytrade', 'description': '–ö—É–ø–ª—è, –ø—Ä–æ–¥–∞–∂–∞, –æ–±–º–µ–Ω'}
]

# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

def get_game_version(command):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    if 'play3xia' in command:
        return 'play3xia'
    elif 'play3x' in command:
        return 'play3x'
    elif 'playxxx' in command:
        return 'playxxx'
    return 'play3xia'

def can_attempt(user_id, game_version):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if user_id not in user_attempts:
        return True
    if game_version not in user_attempts[user_id]:
        return True
    
    last_attempt = user_attempts[user_id][game_version]
    interval_minutes = word_games[game_version]['interval']
    return datetime.now() - last_attempt >= timedelta(minutes=interval_minutes)

def record_attempt(user_id, game_version):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_attempts:
        user_attempts[user_id] = {}
    user_attempts[user_id][game_version] = datetime.now()

def normalize_word(word):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return word.lower().strip().replace('—ë', '–µ')

# ============= –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ =============

async def start_command(update, context):
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")]
    ]
    
    text = """üóØÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrixBot!*

*–¢—Ä–∏–∫—Å* ‚Äì —ç—Ç–æ –≥–∏–¥ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É –∏ –í–µ–Ω–≥—Ä–∏–∏.

*–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:*
üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏
üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* - –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è  
üôÖ *–ö–∞—Ç–∞–ª–æ–≥* - —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —É—Å–ª—É–≥
üïµÔ∏è‚Äç‚ôÇÔ∏è *–ë–∞—Ä–∞—Ö–æ–ª–∫–∞* - –∫—É–ø–ª—è/–ø—Ä–æ–¥–∞–∂–∞/–æ–±–º–µ–Ω

*–ò–≥—Ä—ã:* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ play3xia, play3x, playxxx
*–ö–æ–º–∞–Ω–¥—ã:* /admin –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, /trixlinks –¥–ª—è —Å—Å—ã–ª–æ–∫

‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ ‚Ä¢ üéØ –£–¥–æ–±–Ω–æ ‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ"""
    
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def id_command(update, context):
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"""üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**

üë§ –í–∞—à ID: `{user.id}`"""
    
    if chat.type != 'private':
        text += f"""
üí¨ ID —á–∞—Ç–∞: `{chat.id}`
üìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"""
        
        if chat.title:
            text += f"""
üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinks_command(update, context):
    text = "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**\n\n"
    
    for i, link in enumerate(trix_links, 1):
        text += f"{i}. **{link['name']}**\n"
        text += f"üîó {link['url']}\n"
        text += f"üìù {link['description']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def say_command(update, context):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /say:**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/say –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/say 123456789 –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`\n"
            "‚Ä¢ `/say ID_123456789 –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    message = ' '.join(context.args[1:])
    
    target_user_id = None
    
    if target.startswith('ID_'):
        try:
            target_user_id = int(target[3:])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    elif target.isdigit():
        target_user_id = int(target)
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç ID_123456789")
        return
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message[:100]}{'...' if len(message) > 100 else ''}",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        error_msg = str(e)
        if "bot was blocked" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")

async def admin_command(update, context):
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = """üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:**

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
‚Ä¢ `/say ID —Å–æ–æ–±—â–µ–Ω–∏–µ` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ `/id` - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞
‚Ä¢ `/trixlinks` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

**–ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" (–¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π play3xia, play3x, playxxx):**
‚Ä¢ `/play3xiawordadd —Å–ª–æ–≤–æ` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/play3xiawordon` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/play3xiawordoff` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/play3xiaanstimeset –º–∏–Ω—É—Ç—ã` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫

**–†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:**
‚Ä¢ `/play3xiaroll 3` - –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (1-5 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π)
‚Ä¢ `/play3xiarollreset` - —Å–±—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/play3xiarollstatus` - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

**–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã:**
‚Ä¢ `/play3xiasay —Å–ª–æ–≤–æ` - —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/play3xiaroll 9999` - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

# ============= –ò–ì–†–ê "–£–ì–ê–î–ê–ô –°–õ–û–í–û" =============

async def wordadd_command(update, context):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordadd —Å–ª–æ–≤–æ`")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    word = context.args[0].lower()
    
    word_games[game_version]['words'][word] = {
        'description': f'–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {word}',
        'hints': []
    }
    
    await update.message.reply_text(
        f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–≥—Ä—É {game_version}:**\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}",
        parse_mode='Markdown'
    )

async def wordon_command(update, context):
    """–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    if not word_games[game_version]['words']:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_version}")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    current_word = random.choice(list(word_games[game_version]['words'].keys()))
    word_games[game_version]['current_word'] = current_word
    word_games[game_version]['active'] = True
    word_games[game_version]['winners'] = []
    
    await update.message.reply_text(
        f"üéÆ **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ù–ê–ß–ê–õ–°–Ø!**\n\n"
        f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/{game_version}say —Å–ª–æ–≤–æ` –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {word_games[game_version]['interval']} –º–∏–Ω—É—Ç",
        parse_mode='Markdown'
    )

async def wordoff_command(update, context):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    word_games[game_version]['active'] = False
    current_word = word_games[game_version]['current_word']
    
    await update.message.reply_text(
        f"üõë **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
        f"üéØ –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}",
        parse_mode='Markdown'
    )

async def anstimeset_command(update, context):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaanstimeset 60`")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    minutes = int(context.args[0])
    
    word_games[game_version]['interval'] = minutes
    
    await update.message.reply_text(
        f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {game_version}: {minutes} –º–∏–Ω—É—Ç**",
        parse_mode='Markdown'
    )

async def game_say_command(update, context):
    """–ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"""
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiasay —Å–ª–æ–≤–æ`")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    guess = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    if not word_games[game_version]['active']:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω–∫—É—Ä—Å {game_version} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if not can_attempt(user_id, game_version):
        interval = word_games[game_version]['interval']
        await update.message.reply_text(f"‚è∞ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑ –≤ {interval} –º–∏–Ω—É—Ç")
        return
    
    record_attempt(user_id, game_version)
    current_word = word_games[game_version]['current_word']
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=MODERATION_GROUP_ID,
            text=f"üéÆ **–ò–≥—Ä–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ {game_version}:**\n\n"
                 f"üë§ @{username} (ID: {user_id})\n"
                 f"üéØ –ü–æ–ø—ã—Ç–∫–∞: {guess}\n"
                 f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_word}",
            parse_mode='Markdown'
        )
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if normalize_word(guess) == normalize_word(current_word):
        word_games[game_version]['winners'].append(username)
        word_games[game_version]['active'] = False
        
        await update.message.reply_text(
            f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**\n\n"
            f"@{username}, –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!\n\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–±–µ–¥–µ
        try:
            await context.bot.send_message(
                chat_id=MODERATION_GROUP_ID,
                text=f"üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í –ò–ì–†–ï {game_version}!**\n\n"
                     f"üë§ @{username} (ID: {user_id})\n"
                     f"üéØ –£–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {current_word}",
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {word_games[game_version]['interval']} –º–∏–Ω—É—Ç")

# ============= –†–û–ó–´–ì–†–´–® –ù–û–ú–ï–†–û–í =============

async def roll_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /roll - –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Å —á–∏—Å–ª–æ–º 1-5 = –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    if (user_id in ADMIN_IDS and context.args and 
        len(context.args) == 1 and context.args[0].isdigit() and 
        1 <= int(context.args[0]) <= 5):
        
        winners_count = int(context.args[0])
        participants = roll_games[game_version]['participants']
        
        if len(participants) < winners_count:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {winners_count} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
        winning_number = random.randint(1, 9999)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –Ω–æ–º–µ—Ä–∞
        participants_list = [(data['username'], data['number']) for data in participants.values()]
        participants_list.sort(key=lambda x: abs(x[1] - winning_number))
        
        winners = participants_list[:winners_count]
        winners_text = [f"@{username} ({number})" for username, number in winners]
        
        result_text = (
            f"üéâ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê {game_version.upper()}!**\n\n"
            f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: **{winning_number}**\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join([f"{i+1}. {w}" for i, w in enumerate(winners_text)]) +
            f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
        )
        
        await update.message.reply_text(result_text)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å "9999" = –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    if not context.args or context.args[0] != '9999':
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaroll 9999`")
        return
    
    username = update.effective_user.username or f"ID_{user_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ
    if user_id in roll_games[game_version]['participants']:
        existing_number = roll_games[game_version]['participants'][user_id]['number']
        await update.message.reply_text(
            f"@{username}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä: **{existing_number}**"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    existing_numbers = [p['number'] for p in roll_games[game_version]['participants'].values()]
    
    while True:
        number = random.randint(1, 9999)
        if number not in existing_numbers:
            break
    
    roll_games[game_version]['participants'][user_id] = {
        'username': username,
        'number': number,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: **{number}**\n\n"
        f"üé≤ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(roll_games[game_version]['participants'])}"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=MODERATION_GROUP_ID,
            text=f"üé≤ **–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version}:**\n\n"
                 f"üë§ @{username} (ID: {user_id})\n"
                 f"üî¢ –ù–æ–º–µ—Ä: {number}",
            parse_mode='Markdown'
        )
    except:
        pass

async def mynumber_command(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä"""
    command_text = update.message.text
    game_version = get_game_version(command_text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if user_id not in roll_games[game_version]['participants']:
        await update.message.reply_text(
            f"@{username}, –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/{game_version}roll 9999` –¥–ª—è —É—á–∞—Å—Ç–∏—è"
        )
        return
    
    number = roll_games[game_version]['participants'][user_id]['number']
    await update.message.reply_text(f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä: **{number}**")

async def rollreset_command(update, context):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    
    participants_count = len(roll_games[game_version]['participants'])
    roll_games[game_version]['participants'] = {}
    
    await update.message.reply_text(
        f"‚úÖ **–†–æ–∑—ã–≥—Ä—ã—à {game_version} —Å–±—Ä–æ—à–µ–Ω!**\n\n"
        f"üìä –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
    )

async def rollstatus_command(update, context):
    """–°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    command_text = update.message.text
    game_version = get_game_version(command_text)
    participants = roll_games[game_version]['participants']
    
    if not participants:
        await update.message.reply_text(f"üìä –†–æ–∑—ã–≥—Ä—ã—à {game_version}: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = f"üìä **–°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version}:**\n\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
    
    for i, (user_id, data) in enumerate(participants.items(), 1):
        text += f"{i}. @{data['username']} ‚Äì {data['number']}\n"
    
    await update.message.reply_text(text)

def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CommandHandler("trixlinks", trixlinks_command))
    application.add_handler(CommandHandler("say", say_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - play3xia
    application.add_handler(CommandHandler("play3xiawordadd", wordadd_command))
    application.add_handler(CommandHandler("play3xiawordon", wordon_command))
    application.add_handler(CommandHandler("play3xiawordoff", wordoff_command))
    application.add_handler(CommandHandler("play3xiaanstimeset", anstimeset_command))
    application.add_handler(CommandHandler("play3xiasay", game_say_command))
    application.add_handler(CommandHandler("play3xiaroll", roll_command))
    application.add_handler(CommandHandler("play3xiamynumber", mynumber_command))
    application.add_handler(CommandHandler("play3xiarollreset", rollreset_command))
    application.add_handler(CommandHandler("play3xiarollstatus", rollstatus_command))
    
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - play3x
    application.add_handler(CommandHandler("play3xwordadd", wordadd_command))
    application.add_handler(CommandHandler("play3xwordon", wordon_command))
    application.add_handler(CommandHandler("play3xwordoff", wordoff_command))
    application.add_handler(CommandHandler("play3xanstimeset", anstimeset_command))
    application.add_handler(CommandHandler("play3xsay", game_say_command))
    application.add_handler(CommandHandler("play3xroll", roll_command))
    application.add_handler(CommandHandler("play3xmynumber", mynumber_command))
    application.add_handler(CommandHandler("play3xrollreset", rollreset_command))
    application.add_handler(CommandHandler("play3xrollstatus", rollstatus_command))
    
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - playxxx
    application.add_handler(CommandHandler("playxxxwordadd", wordadd_command))
    application.add_handler(CommandHandler("playxxxwordon", wordon_command))
    application.add_handler(CommandHandler("playxxxwordoff", wordoff_command))
    application.add_handler(CommandHandler("playxxxanstimeset", anstimeset_command))
    application.add_handler(CommandHandler("playxxxsay", game_say_command))
    application.add_handler(CommandHandler("playxxxroll", roll_command))
    application.add_handler(CommandHandler("playxxxmynumber", mynumber_command))
    application.add_handler(CommandHandler("playxxxrollreset", rollreset_command))
    application.add_handler(CommandHandler("playxxxrollstatus", rollstatus_command))
    
    logger.info("Bot with games started successfully")
    application.run_polling(allowed_updates=['message'])

if __name__ == "__main__":
    main()
