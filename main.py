#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler,
    filters
)
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

async def start_command(update, context):
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")]
    ]
    
    text = """üóØÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrixBot!*

*–¢—Ä–∏–∫—Å* ‚Äì —ç—Ç–æ –≥–∏–¥ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É –∏ –í–µ–Ω–≥—Ä–∏–∏.

*–ù–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:*
üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏
üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* - –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
üôÖ *–ö–∞—Ç–∞–ª–æ–≥* - —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —É—Å–ª—É–≥
üïµÔ∏è‚Äç‚ôÇÔ∏è *–ë–∞—Ä–∞—Ö–æ–ª–∫–∞* - –∫—É–ø–ª—è/–ø—Ä–æ–¥–∞–∂–∞/–æ–±–º–µ–Ω

‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ ‚Ä¢ üéØ –£–¥–æ–±–Ω–æ ‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ"""
    
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def id_command(update, context):
    user = update.effective_user
    chat = update.effective_chat
    
    text = f"""üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**

üë§ –í–∞—à ID: `{user.id}`"""
    
    if chat.type != 'private':
        text += f"""
üí¨ ID —á–∞—Ç–∞: `{chat.id}`
üìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}"""
        
        if chat.title:
            text += f"""
üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinks_command(update, context):
    text = """üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**

1. **–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç**
üîó https://t.me/snghu
üìù –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ë—É–¥–∞–ø–µ—à—Ç–∞

2. **–ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç**  
üîó https://t.me/tgchatxxx
üìù –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

3. **–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥**
üîó https://t.me/trixvault  
üìù –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ë—É–¥–∞–ø–µ—à—Ç–∞

4. **–ë–∞—Ä–∞—Ö–æ–ª–∫–∞**
üîó https://t.me/hungarytrade
üìù –ö—É–ø–ª—è, –ø—Ä–æ–¥–∞–∂–∞, –æ–±–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤"""

    await update.message.reply_text(text, parse_mode='Markdown')

async def say_command(update, context):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
    ADMIN_IDS = [7811593067]  # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ ID –∞–¥–º–∏–Ω–æ–≤
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /say:**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/say –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/say @john –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`\n"
            "‚Ä¢ `/say 123456789 –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`\n"
            "‚Ä¢ `/say ID_123456789 –ü–æ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    message = ' '.join(context.args[1:])
    
    target_user_id = None
    
    if target.startswith('ID_'):
        try:
            target_user_id = int(target[3:])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    elif target.isdigit():
        target_user_id = int(target)
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç ID_123456789")
        return
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message[:100]}{'...' if len(message) > 100 else ''}",
            parse_mode='Markdown'
        )
        
        logger.info(f"Admin {user_id} sent message to {target_user_id}")
        
    except Exception as e:
        error_msg = str(e)
        if "bot was blocked" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        elif "chat not found" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")

async def admin_command(update, context):
    user_id = update.effective_user.id
    ADMIN_IDS = [7811593067]  # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ ID –∞–¥–º–∏–Ω–æ–≤
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = """üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:**

‚Ä¢ `/say ID —Å–æ–æ–±—â–µ–Ω–∏–µ` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ `/id` - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞  
‚Ä¢ `/trixlinks` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
‚Ä¢ `/admin` - —ç—Ç–∞ –ø–∞–Ω–µ–ª—å

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/say 123456789 –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`
‚Ä¢ `/say ID_123456789 –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`"""
    
    await update.message.reply_text(text, parse_mode='Markdown')

def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CommandHandler("trixlinks", trixlinks_command))
    application.add_handler(CommandHandler("say", say_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    logger.info("Bot started successfully")
    application.run_polling(allowed_updates=['message'])

if __name__ == "__main__":
    main()
