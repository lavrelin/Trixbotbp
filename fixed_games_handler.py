# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from config import Config
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ data –º–æ–¥—É–ª–µ–π
from data.games_data import (
    word_games, roll_games, user_attempts,
    get_game_version, can_attempt, record_attempt,
    normalize_word, start_word_game, stop_word_game,
    add_winner, get_unique_roll_number
)
from data.user_data import update_user_activity, is_user_banned, is_user_muted

logger = logging.getLogger(__name__)

# ============= –ò–ì–†–ê "–£–ì–ê–î–ê–ô –°–õ–û–í–û" =============

class WordGame:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã
        self.games_data = {
            'play3xia': {
                'words': {},  # {word: {'description': str, 'hints': [], 'media': []}}
                'current_word': None,
                'active': False,
                'winners': [],
                'attempts_interval': 60  # –º–∏–Ω—É—Ç—ã
            },
            'play3x': {
                'words': {},
                'current_word': None,
                'active': False,
                'winners': [],
                'attempts_interval': 60
            },
            'playxxx': {
                'words': {},
                'current_word': None,
                'active': False,
                'winners': [],
                'attempts_interval': 60
            }
        }
        self.user_attempts = {}  # {user_id: {game_version: last_attempt_time}}

    def get_game_version(self, command: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
        if command.startswith('/play3xia'):
            return 'play3xia'
        elif command.startswith('/play3x'):
            return 'play3x'
        elif command.startswith('/playxxx'):
            return 'playxxx'
        return 'play3xia'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def can_attempt(self, user_id: int, game_version: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É"""
        if user_id not in self.user_attempts:
            return True
        
        if game_version not in self.user_attempts[user_id]:
            return True
        
        last_attempt = self.user_attempts[user_id][game_version]
        interval_minutes = self.games_data[game_version]['attempts_interval']
        
        return datetime.now() - last_attempt >= timedelta(minutes=interval_minutes)

    def record_attempt(self, user_id: int, game_version: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_attempts:
            self.user_attempts[user_id] = {}
        
        self.user_attempts[user_id][game_version] = datetime.now()

    def normalize_word(self, word: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        return word.lower().strip().replace('—ë', '–µ')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
word_game = WordGame()

# ============= –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–õ–û–í–ê–ú–ò (–ê–î–ú–ò–ù) =============

async def wordadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordadd —Å–ª–æ–≤–æ`\n"
            "–ü—Ä–∏–º–µ—Ä: `/play3xiawordadd –ú–æ—Å—Ç`",
            parse_mode='Markdown'
        )
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    
    text = f"""üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ {game_version.upper()}:**

**üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏:**
‚Ä¢ `/{game_version}wordadd —Å–ª–æ–≤–æ` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/{game_version}wordedit —Å–ª–æ–≤–æ –æ–ø–∏—Å–∞–Ω–∏–µ` ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å
‚Ä¢ `/{game_version}wordclear —Å–ª–æ–≤–æ` ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
‚Ä¢ `/{game_version}wordon` ‚Äì –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/{game_version}wordoff` ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å
‚Ä¢ `/{game_version}wordinfoedit —Ç–µ–∫—Å—Ç` ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ `/{game_version}anstimeset –º–∏–Ω—É—Ç—ã` ‚Äì –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø—ã—Ç–æ–∫

**üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º:**
‚Ä¢ `/{game_version}roll [1-5]` ‚Äì –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
‚Ä¢ `/{game_version}rollreset` ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ `/{game_version}rollstatus` ‚Äì —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/{game_version}say —Å–ª–æ–≤–æ` ‚Äì –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å
‚Ä¢ `/{game_version}wordinfo` ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ
‚Ä¢ `/{game_version}roll 9999` ‚Äì –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
‚Ä¢ `/{game_version}mynumber` ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä"""

    await update.message.reply_text(text, parse_mode='Markdown') word_game.get_game_version(command_text)
    word = context.args[0].lower()
    
    word_game.games_data[game_version]['words'][word] = {
        'description': f'–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {word}',
        'hints': [],
        'media': []
    }
    
    await update.message.reply_text(
        f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–≥—Ä—É {game_version}:**\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {word_game.games_data[game_version]['words'][word]['description']}",
        parse_mode='Markdown'
    )

async def wordedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordedit —Å–ª–æ–≤–æ –Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ`\n"
            "–ü—Ä–∏–º–µ—Ä: `/play3xiawordedit –º–æ—Å—Ç –ó–Ω–∞–º–µ–Ω–∏—Ç—ã–π –º–æ—Å—Ç –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ`",
            parse_mode='Markdown'
        )
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    word = context.args[0].lower()
    new_description = ' '.join(context.args[1:])
    
    if word not in word_game.games_data[game_version]['words']:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version}")
        return
    
    word_game.games_data[game_version]['words'][word]['description'] = new_description
    
    await update.message.reply_text(
        f"‚úÖ **–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version}:**\n\n"
        f"üéØ –°–ª–æ–≤–æ: {word}\n"
        f"üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}",
        parse_mode='Markdown'
    )

async def wordclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordclear —Å–ª–æ–≤–æ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    word = context.args[0].lower()
    
    if word in word_game.games_data[game_version]['words']:
        del word_game.games_data[game_version]['words'][word]
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–≥—Ä—ã {game_version}")
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–≥—Ä–µ {game_version}")

async def wordon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    
    if not word_game.games_data[game_version]['words']:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game_version}. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π wordadd")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    available_words = list(word_game.games_data[game_version]['words'].keys())
    current_word = random.choice(available_words)
    
    word_game.games_data[game_version]['current_word'] = current_word
    word_game.games_data[game_version]['active'] = True
    word_game.games_data[game_version]['winners'] = []
    
    description = word_game.games_data[game_version]['words'][current_word]['description']
    
    await update.message.reply_text(
        f"üéÆ **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ù–ê–ß–ê–õ–°–Ø!**\n\n"
        f"üìù {description}\n\n"
        f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/{game_version}say —Å–ª–æ–≤–æ` –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {word_game.games_data[game_version]['attempts_interval']} –º–∏–Ω—É—Ç",
        parse_mode='Markdown'
    )

async def wordoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    
    word_game.games_data[game_version]['active'] = False
    current_word = word_game.games_data[game_version]['current_word']
    winners = word_game.games_data[game_version]['winners']
    
    winner_text = ""
    if winners:
        winner_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join([f'@{w}' for w in winners])}"
    else:
        winner_text = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –±—ã–ª–æ"
    
    await update.message.reply_text(
        f"üõë **–ö–æ–Ω–∫—É—Ä—Å {game_version} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
        f"üéØ –°–ª–æ–≤–æ –±—ã–ª–æ: {current_word or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"{winner_text}\n\n"
        f"üìã –ö–æ–Ω–∫—É—Ä—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å.",
        parse_mode='Markdown'
    )

async def anstimeset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaanstimeset 60` (–≤ –º–∏–Ω—É—Ç–∞—Ö)", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    minutes = int(context.args[0])
    
    word_game.games_data[game_version]['attempts_interval'] = minutes
    
    await update.message.reply_text(
        f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {game_version}:**\n\n"
        f"‚è∞ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç",
        parse_mode='Markdown'
    )

async def wordinfoedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiawordinfoedit –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    new_description = ' '.join(context.args)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
    if 'description' not in word_game.games_data[game_version]:
        word_game.games_data[game_version]['description'] = new_description
    else:
        word_game.games_data[game_version]['description'] = new_description
    
    await update.message.reply_text(
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ {game_version} –∏–∑–º–µ–Ω–µ–Ω–æ:**\n\n{new_description}",
        parse_mode='Markdown'
    )

# ============= –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í =============

async def game_say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ"""
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiasay —Å–ª–æ–≤–æ`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    guess = context.args[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_activity(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –º—É—Ç
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    if not word_game.games_data[game_version]['active']:
        await update.message.reply_text(f"‚ùå –ö–æ–Ω–∫—É—Ä—Å {game_version} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    if not word_game.can_attempt(user_id, game_version):
        interval = word_game.games_data[game_version]['attempts_interval']
        await update.message.reply_text(
            f"‚è∞ –í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–∞–∑ –≤ {interval} –º–∏–Ω—É—Ç"
        )
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    word_game.record_attempt(user_id, game_version)
    
    current_word = word_game.games_data[game_version]['current_word']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=f"üéÆ **–ò–≥—Ä–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ {game_version}:**\n\n"
                 f"üë§ @{username} (ID: {user_id})\n"
                 f"üéØ –ü–æ–ø—ã—Ç–∫–∞: {guess}\n"
                 f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_word}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending game notification: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if word_game.normalize_word(guess) == word_game.normalize_word(current_word):
        # –ü–û–ë–ï–î–ê!
        word_game.games_data[game_version]['winners'].append(username)
        word_game.games_data[game_version]['active'] = False
        
        await update.message.reply_text(
            f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**\n\n"
            f"@{username}, –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ '{current_word}' –∏ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!\n\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–±–µ–¥–µ
        try:
            await context.bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=f"üèÜ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –í –ò–ì–†–ï {game_version}!**\n\n"
                     f"üë§ @{username} (ID: {user_id})\n"
                     f"üéØ –£–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ: {current_word}\n\n"
                     f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error sending winner notification: {e}")
    
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {word_game.games_data[game_version]['attempts_interval']} –º–∏–Ω—É—Ç")

async def wordinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–ª–æ–≤–µ"""
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    
    if not word_game.games_data[game_version]['active']:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
        description = word_game.games_data[game_version].get('description', f"–ö–æ–Ω–∫—É—Ä—Å {game_version} –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        await update.message.reply_text(
            f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {game_version}:**\n\n"
            f"üìù {description}",
            parse_mode='Markdown'
        )
        return
    
    current_word = word_game.games_data[game_version]['current_word']
    if current_word and current_word in word_game.games_data[game_version]['words']:
        description = word_game.games_data[game_version]['words'][current_word]['description']
        
        await update.message.reply_text(
            f"üéØ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ {game_version}:**\n\n"
            f"üìù {description}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/{game_version}say —Å–ª–æ–≤–æ` –¥–ª—è —É—á–∞—Å—Ç–∏—è",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞")

# ============= –°–ò–°–¢–ï–ú–ê –†–û–ó–´–ì–†–´–®–ï–ô (RollGame) =============

class RollGame:
    def __init__(self):
        self.games_data = {
            'play3xia': {'participants': {}, 'active': True},
            'play3x': {'participants': {}, 'active': True},
            'playxxx': {'participants': {}, 'active': True}
        }
    
    def get_game_version(self, command: str) -> str:
        if command.startswith('/play3xia'):
            return 'play3xia'
        elif command.startswith('/play3x'):
            return 'play3x'
        elif command.startswith('/playxxx'):
            return 'playxxx'
        return 'play3xia'

roll_game = RollGame()

async def roll_participant_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    if not context.args or context.args[0] != '9999':
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaroll 9999`", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = roll_game.get_game_version(command_text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_activity(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –º—É—Ç
    if is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        return
    
    if is_user_muted(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º—É—Ç–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in roll_game.games_data[game_version]['participants']:
        existing_number = roll_game.games_data[game_version]['participants'][user_id]['number']
        await update.message.reply_text(
            f"@{username}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: **{existing_number}**",
            parse_mode='Markdown'
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    existing_numbers = [p['number'] for p in roll_game.games_data[game_version]['participants'].values()]
    
    while True:
        number = random.randint(1, 9999)
        if number not in existing_numbers:
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    roll_game.games_data[game_version]['participants'][user_id] = {
        'username': username,
        'number': number,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: **{number}**\n\n"
        f"üé≤ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(roll_game.games_data[game_version]['participants'])}",
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=f"üé≤ **–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version}:**\n\n"
                 f"üë§ @{username} (ID: {user_id})\n"
                 f"üî¢ –ù–æ–º–µ—Ä: {number}\n"
                 f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(roll_game.games_data[game_version]['participants'])}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending roll notification: {e}")

async def mynumber_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    command_text = update.message.text
    game_version = roll_game.get_game_version(command_text)
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if user_id not in roll_game.games_data[game_version]['participants']:
        await update.message.reply_text(
            f"@{username}, –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {game_version}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/{game_version}roll 9999` –¥–ª—è —É—á–∞—Å—Ç–∏—è",
            parse_mode='Markdown'
        )
        return
    
    number = roll_game.games_data[game_version]['participants'][user_id]['number']
    await update.message.reply_text(f"@{username}, –≤–∞—à –Ω–æ–º–µ—Ä: **{number}**", parse_mode='Markdown')

async def roll_draw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/play3xiaroll 3` (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π 1-5)", parse_mode='Markdown')
        return
    
    command_text = update.message.text
    game_version = roll_game.get_game_version(command_text)
    winners_count = min(5, max(1, int(context.args[0])))
    
    participants = roll_game.games_data[game_version]['participants']
    
    if len(participants) < winners_count:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {winners_count} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    winning_number = random.randint(1, 9999)
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –Ω–æ–º–µ—Ä–∞
    participants_list = [
        (user_id, data['username'], data['number'])
        for user_id, data in participants.items()
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–º—É —á–∏—Å–ª—É
    participants_list.sort(key=lambda x: abs(x[2] - winning_number))
    
    # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = participants_list[:winners_count]
    
    winners_text = []
    for user_id, username, number in winners:
        winners_text.append(f"@{username} ({number})")
    
    result_text = (
        f"üéâ **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê {game_version.upper()}!**\n\n"
        f"üé≤ –í—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ: **{winning_number}**\n\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n" + "\n".join([f"{i+1}. {w}" for i, w in enumerate(winners_text)]) +
        f"\n\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
    )
    
    await update.message.reply_text(result_text, parse_mode='Markdown')

async def rollreset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = roll_game.get_game_version(command_text)
    
    participants_count = len(roll_game.games_data[game_version]['participants'])
    roll_game.games_data[game_version]['participants'] = {}
    
    await update.message.reply_text(
        f"‚úÖ **–†–æ–∑—ã–≥—Ä—ã—à {game_version} —Å–±—Ä–æ—à–µ–Ω!**\n\n"
        f"üìä –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
        f"üÜï –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É",
        parse_mode='Markdown'
    )

async def rollstatus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∞–¥–º–∏–Ω)"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version = roll_game.get_game_version(command_text)
    
    participants = roll_game.games_data[game_version]['participants']
    
    if not participants:
        await update.message.reply_text(f"üìä –†–æ–∑—ã–≥—Ä—ã—à {game_version}: –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    text = f"üìä **–°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {game_version}:**\n\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
    text += "üìã **–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
    
    for i, (user_id, data) in enumerate(participants.items(), 1):
        text += f"{i}. @{data['username']} ‚Äì {data['number']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

# ============= –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def gamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    command_text = update.message.text
    game_version = word_game.get_game_version(command_text)
    
    text = f"""üéÆ **–ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ {game_version.upper()}:**

**üéØ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:**
‚Ä¢ `/{game_version}say —Å–ª–æ–≤–æ` ‚Äì –ø–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å
‚Ä¢ `/{game_version}wordinfo` ‚Äì –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Å–ª–æ–≤–µ

**üé≤ –†–æ–∑—ã–≥—Ä—ã—à –Ω–æ–º–µ—Ä–æ–≤:**
‚Ä¢ `/{game_version}roll 9999` ‚Äì –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä
‚Ä¢ `/{game_version}mynumber` ‚Äì –º–æ–π –Ω–æ–º–µ—Ä

**‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –í –∏–≥—Ä–µ "—É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
‚Ä¢ –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä 1-9999
‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    await update.message.reply_text(text, parse_mode='Markdown')

async def admgamesinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command_text = update.message.text
    game_version =