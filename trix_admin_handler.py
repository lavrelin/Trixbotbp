from telegram import Update
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import CooldownService
from models import User, Post, PostStatus, BanMute, ActionType
from sqlalchemy import select, func
from datetime import datetime, timedelta
from utils.permissions import admin_only, moderator_only
import logging
import re

logger = logging.getLogger(__name__)

@moderator_only
async def panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show admin panel"""
    text = (
        "üõ† *–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "üë§ /user [id/@username] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "üö´ /ban @username - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚úÖ /unban @username - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üîá /mute @username [–≤—Ä–µ–º—è] - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üîä /unmute @username - —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚è∞ /cdreset @username - —Å–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω\n"
        "üì¢ /broadcast <—Ç–µ–∫—Å—Ç> - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "üë• /admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

@moderator_only
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bot statistics"""
    async with db.get_session() as session:
        # Count users
        users_count = await session.execute(
            select(func.count(User.id))
        )
        total_users = users_count.scalar()
        
        # Count active users (posted in last 7 days)
        week_ago = datetime.utcnow() - timedelta(days=7)
        active_users = await session.execute(
            select(func.count(func.distinct(Post.user_id)))
            .where(Post.created_at > week_ago)
        )
        active_count = active_users.scalar()
        
        # Count posts by status
        pending = await session.execute(
            select(func.count(Post.id))
            .where(Post.status == PostStatus.PENDING)
        )
        pending_count = pending.scalar()
        
        approved = await session.execute(
            select(func.count(Post.id))
            .where(Post.status == PostStatus.APPROVED)
        )
        approved_count = approved.scalar()
        
        rejected = await session.execute(
            select(func.count(Post.id))
            .where(Post.status == PostStatus.REJECTED)
        )
        rejected_count = rejected.scalar()
        
        # Count banned users
        banned = await session.execute(
            select(func.count(User.id))
            .where(User.banned == True)
        )
        banned_count = banned.scalar()
    
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_count}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {banned_count}\n\n"
        f"*–ü–æ—Å—Ç—ã:*\n"
        f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}\n"
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {approved_count}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n"
        f"üìù –í—Å–µ–≥–æ: {pending_count + approved_count + rejected_count}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

@moderator_only
async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get user information"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user [id/@username]")
        return
    
    user_identifier = context.args[0]
    
    # Parse user ID or username
    if user_identifier.startswith('@'):
        username = user_identifier[1:]
        query = select(User).where(User.username == username)
    else:
        try:
            user_id = int(user_identifier)
            query = select(User).where(User.id == user_id)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    
    async with db.get_session() as session:
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Count user's posts
        posts_count = await session.execute(
            select(func.count(Post.id))
            .where(Post.user_id == user.id)
        )
        total_posts = posts_count.scalar()
        
        # Get level info
        level, level_name = Config.get_level_info(user.xp)
        
        text = (
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
            f"ID: `{user.id}`\n"
            f"Username: @{user.username or '–Ω–µ—Ç'}\n"
            f"–ò–º—è: {user.first_name or '–Ω–µ—Ç'}\n"
            f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ—Ç'}\n"
            f"–ü–æ–ª: {user.gender.value if user.gender else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birthdate.strftime('%d.%m.%Y') if user.birthdate else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"XP: {user.xp}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {level} - {level_name}\n"
            f"–ü–æ—Å—Ç–æ–≤: {total_posts}\n"
            f"–ù–∞—Ä—É—à–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫: {user.link_violations}\n\n"
            f"üö´ –ó–∞–±–∞–Ω–µ–Ω: {'–î–∞' if user.banned else '–ù–µ—Ç'}\n"
            f"üîá –ú—É—Ç –¥–æ: {user.mute_until.strftime('%d.%m %H:%M') if user.mute_until and user.mute_until > datetime.utcnow() else '–ù–µ—Ç'}\n"
            f"‚è∞ –ö—É–ª–¥–∞—É–Ω –¥–æ: {user.cooldown_expires_at.strftime('%d.%m %H:%M') if user.cooldown_expires_at and user.cooldown_expires_at > datetime.utcnow() else '–ù–µ—Ç'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')

@moderator_only
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ban user"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username")
        return
    
    username = context.args[0].replace('@', '')
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if Config.is_moderator(user.id):
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        user.banned = True
        
        # Log ban
        ban_log = BanMute(
            user_id=user.id,
            type=ActionType.BAN,
            imposed_by=update.effective_user.id,
            reason="Manual ban by moderator"
        )
        session.add(ban_log)
        
        await session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω"
        )
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
            )
        except:
            pass

@moderator_only
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unban user"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
        return
    
    username = context.args[0].replace('@', '')
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.banned = False
        user.link_violations = 0  # Reset violations
        await session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω"
        )
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"
            )
        except:
            pass

@moderator_only
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mute user"""
    if len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username [–≤—Ä–µ–º—è]\n"
            "–í—Ä–µ–º—è: 5m, 1h, 1d (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1h)"
        )
        return
    
    username = context.args[0].replace('@', '')
    duration_str = context.args[1] if len(context.args) > 1 else "1h"
    
    # Parse duration
    duration = parse_duration(duration_str)
    if not duration:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 5m, 1h, 1d")
        return
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if Config.is_moderator(user.id):
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        user.mute_until = datetime.utcnow() + duration
        
        # Log mute
        mute_log = BanMute(
            user_id=user.id,
            type=ActionType.MUTE,
            until=user.mute_until,
            imposed_by=update.effective_user.id,
            reason=f"Mute for {duration_str}"
        )
        session.add(mute_log)
        
        await session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_str}"
        )
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text=f"üîá –í—ã –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ {duration_str}"
            )
        except:
            pass

@moderator_only
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unmute user"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute @username")
        return
    
    username = context.args[0].replace('@', '')
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user.mute_until = None
        await session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–º—É—á–µ–Ω"
        )
        
        # Notify user
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text="üîä –í—ã –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã"
            )
        except:
            pass

@moderator_only
async def cdreset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reset user cooldown"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cdreset @username")
        return
    
    username = context.args[0].replace('@', '')
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cooldown_service = CooldownService()
        if await cooldown_service.reset_cooldown(user.id):
            await update.message.reply_text(
                f"‚úÖ –ö—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å–±—Ä–æ—à–µ–Ω"
            )
            
            # Notify user
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text="‚è∞ –í–∞—à –∫—É–ª–¥–∞—É–Ω –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except:
                pass
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—É–ª–¥–∞—É–Ω–∞")

@admin_only
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Broadcast message to all users"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    
    message = ' '.join(context.args)
    
    async with db.get_session() as session:
        result = await session.execute(
            select(User).where(User.banned == False)
        )
        users = result.scalars().all()
        
        sent = 0
        failed = 0
        
        await update.message.reply_text(
            f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
        )
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üì¢ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n\n{message}",
                    parse_mode='Markdown'
                )
                sent += 1
            except Exception as e:
                failed += 1
                logger.error(f"Failed to send broadcast to {user.id}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"–û—à–∏–±–æ–∫: {failed}"
        )

@moderator_only
async def admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show list of admins and moderators"""
    admins = []
    moderators = []
    
    async with db.get_session() as session:
        for admin_id in Config.ADMIN_IDS:
            result = await session.execute(
                select(User).where(User.id == admin_id)
            )
            user = result.scalar_one_or_none()
            if user:
                admins.append(f"@{user.username}" if user.username else f"ID: {user.id}")
        
        for mod_id in Config.MODERATOR_IDS:
            if mod_id not in Config.ADMIN_IDS:
                result = await session.execute(
                    select(User).where(User.id == mod_id)
                )
                user = result.scalar_one_or_none()
                if user:
                    moderators.append(f"@{user.username}" if user.username else f"ID: {user.id}")
    
    text = "üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞*\n\n"
    
    if admins:
        text += "*–ê–¥–º–∏–Ω—ã:*\n"
        text += "\n".join(f"‚Ä¢ {admin}" for admin in admins)
        text += "\n\n"
    
    if moderators:
        text += "*–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:*\n"
        text += "\n".join(f"‚Ä¢ {mod}" for mod in moderators)
    
    if not admins and not moderators:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    
    await update.message.reply_text(text, parse_mode='Markdown')

def parse_duration(duration_str: str) -> timedelta:
    """Parse duration string to timedelta"""
    match = re.match(r'^(\d+)([mhd]), duration_str.lower())
    if not match:
        return None
    
    value = int(match.group(1))
    unit = match.group(2)
    
    if unit == 'm':
        return timedelta(minutes=value)
    elif unit == 'h':
        return timedelta(hours=value)
    elif unit == 'd':
        return timedelta(days=value)
    
    return None