# -*- coding: utf-8 -*-
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import CooldownService
from services.hashtags import HashtagService
from services.filter_service import FilterService
from models import User, Post, PostStatus
from sqlalchemy import select
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def handle_publication_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle publication callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "cat":
        # Subcategory selected
        subcategory = data[2] if len(data) > 2 else None
        await start_post_creation(update, context, subcategory)
    elif action == "preview":
        await show_preview(update, context)
    elif action == "send":
        await send_to_moderation(update, context)
    elif action == "edit":
        await edit_post(update, context)
    elif action == "cancel":
        await cancel_post_with_reason(update, context)
    elif action == "cancel_confirm":
        await cancel_post(update, context)
    elif action == "add_media":
        await request_media(update, context)
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await show_preview(update, context)

async def start_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str):
    """Start creating a post with selected subcategory"""
    subcategory_names = {
        'work': 'üë∑‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞',
        'rent': 'üè† –ê—Ä–µ–Ω–¥–∞',
        'buy': 'üîª –ö—É–ø–ª—é',
        'sell': 'üî∫ –ü—Ä–æ–¥–∞–º',
        'events': 'üéâ –°–æ–±—ã—Ç–∏—è',
        'free': 'üì¶ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º',
        'important': 'üå™Ô∏è –í–∞–∂–Ω–æ',
        'other': '‚ùî –î—Ä—É–≥–æ–µ'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    context.user_data['post_data'] = {
        'category': 'üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç',
        'subcategory': subcategory_names.get(subcategory, '‚ùî –î—Ä—É–≥–æ–µ'),
        'anonymous': False
    }

    keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu:announcements")]]
    
    await update.callback_query.edit_message_text(
        f"üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç ‚Üí üó£Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è ‚Üí {subcategory_names.get(subcategory)}\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏/–∏–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    context.user_data['waiting_for'] = 'post_text'

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    has_media = update.message.photo or update.message.video or update.message.document
    
    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (caption)
    if has_media and update.message.caption:
        text = update.message.caption
        
        # –ï—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        if context.user_data.get('waiting_for') == 'post_text':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            filter_service = FilterService()
            if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
                await handle_link_violation(update, context)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            if 'post_data' not in context.user_data:
                context.user_data['post_data'] = {}
            
            context.user_data['post_data']['text'] = text
            context.user_data['post_data']['media'] = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
            if update.message.photo:
                context.user_data['post_data']['media'].append({
                    'type': 'photo',
                    'file_id': update.message.photo[-1].file_id
                })
            elif update.message.video:
                context.user_data['post_data']['media'].append({
                    'type': 'video',
                    'file_id': update.message.video.file_id
                })
            elif update.message.document:
                context.user_data['post_data']['media'].append({
                    'type': 'document',
                    'file_id': update.message.document.file_id
                })
            
            keyboard = [
                [
                    InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ–¥–∏–∞", callback_data="pub:add_media"),
                    InlineKeyboardButton("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ]
            
            await update.message.reply_text(
                "üéØ –°—É–ø–µ—Ä! –¢–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                "üé® –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ–¥–∏–∞ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            context.user_data['waiting_for'] = None
            return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞
    if 'waiting_for' not in context.user_data:
        return
    
    waiting_for = context.user_data['waiting_for']
    text = update.message.text if update.message.text else update.message.caption
    
    if not text:
        return
    
    logger.info(f"Text input received. waiting_for: {waiting_for}")
    
    if waiting_for == 'post_text':
        # Check for links
        filter_service = FilterService()
        if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
            await handle_link_violation(update, context)
            return
        
        if 'post_data' not in context.user_data:
            await update.message.reply_text(
                "ü§î –£–ø—Å! –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å.\n"
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            context.user_data.pop('waiting_for', None)
            return
        
        context.user_data['post_data']['text'] = text
        context.user_data['post_data']['media'] = []
        
        keyboard = [
            [
                InlineKeyboardButton("üé¨ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="pub:add_media"),
                InlineKeyboardButton("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üé≠ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['waiting_for'] = None
        
    elif waiting_for == 'cancel_reason':
        context.user_data['cancel_reason'] = text
        await cancel_post(update, context)
        
    elif waiting_for.startswith('piar_'):
        from handlers.piar_handler import handle_piar_text
        field = waiting_for.replace('piar_', '')
        await handle_piar_text(update, context, field, text)

async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle media input from user"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    if 'post_data' not in context.user_data:
        return
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–µ–¥–∏–∞ –¥–∞–∂–µ –µ—Å–ª–∏ waiting_for –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if 'media' not in context.user_data['post_data']:
        context.user_data['post_data']['media'] = []
    
    media_added = False
    
    if update.message.photo:
        # Get highest quality photo
        context.user_data['post_data']['media'].append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
        media_added = True
        logger.info(f"Added photo: {update.message.photo[-1].file_id}")
        
    elif update.message.video:
        context.user_data['post_data']['media'].append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
        media_added = True
        logger.info(f"Added video: {update.message.video.file_id}")
        
    elif update.message.document:
        context.user_data['post_data']['media'].append({
            'type': 'document',
            'file_id': update.message.document.file_id
        })
        media_added = True
        logger.info(f"Added document: {update.message.document.file_id}")
    
    if media_added:
        total_media = len(context.user_data['post_data']['media'])
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="pub:add_media"),
                InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        
        await update.message.reply_text(
            f"üî• –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (–í—Å–µ–≥–æ: {total_media})\n\n"
            "üé™ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        context.user_data['waiting_for'] = None

async def request_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request media from user"""
    context.user_data['waiting_for'] = 'post_media'
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show post preview with media"""
    if 'post_data' not in context.user_data:
        await update.callback_query.edit_message_text("üòµ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    post_data = context.user_data['post_data']
    
    # Generate hashtags
    hashtag_service = HashtagService()
    hashtags = hashtag_service.generate_hashtags(
        post_data.get('category'),
        post_data.get('subcategory')
    )
    
    # Build preview text
    preview_text = f"{post_data.get('text', '')}\n\n"
    preview_text += f"{' '.join(hashtags)}\n\n"
    preview_text += Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="pub:send"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="pub:edit")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:cancel")]
    ]
    
    # Send media preview first if exists
    media = post_data.get('media', [])
    if media:
        try:
            for media_item in media[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
                if media_item.get('type') == 'photo':
                    await update.effective_message.reply_photo(
                        photo=media_item['file_id'],
                        caption="üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ" if len(media) == 1 else None
                    )
                elif media_item.get('type') == 'video':
                    await update.effective_message.reply_video(
                        video=media_item['file_id'],
                        caption="üé• –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ" if len(media) == 1 else None
                    )
                elif media_item.get('type') == 'document':
                    await update.effective_message.reply_document(
                        document=media_item['file_id'],
                        caption="üìÑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç" if len(media) == 1 else None
                    )
        except Exception as e:
            logger.error(f"Error showing media preview: {e}")
    
    # Send preview text
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"üé≠ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{preview_text}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                f"üé≠ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{preview_text}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except:
        await update.effective_message.reply_text(
            f"üé≠ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:*\n\n{preview_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def send_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send post to moderation with safe DB handling"""
    user_id = update.effective_user.id
    
    try:
        # Check cooldown
        from services.cooldown import CooldownService
        cooldown_service = CooldownService()
        can_post, remaining = await cooldown_service.can_post(user_id)
        
        if not can_post:
            minutes = remaining // 60
            hours = minutes // 60
            mins = minutes % 60
            
            if hours > 0:
                time_str = f"{hours} —á. {mins} –º–∏–Ω."
            else:
                time_str = f"{minutes} –º–∏–Ω."
                
            await update.callback_query.answer(
                f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_str} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π",
                show_alert=True
            )
            return
    except Exception as e:
        logger.warning(f"Cooldown check failed: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞
    
    post_data = context.user_data.get('post_data', {})
    
    # Save to database with error handling
    try:
        from services.db import db
        from models import User, Post, PostStatus
        from services.hashtags import HashtagService
        from sqlalchemy import select
        
        async with db.get_session() as session:
            # Get user
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # Create post
            hashtag_service = HashtagService()
            hashtags = hashtag_service.generate_hashtags(
                post_data.get('category'),
                post_data.get('subcategory')
            )
            
            post = Post(
                user_id=user_id,
                category=post_data.get('category'),
                subcategory=post_data.get('subcategory'),
                text=post_data.get('text', ''),
                media=post_data.get('media', []),
                hashtags=hashtags,
                anonymous=post_data.get('anonymous', False),
                status=PostStatus.PENDING
            )
            
            session.add(post)
            await session.commit()
            
            # Send to moderation group
            await send_to_moderation_group(update, context, post, user)
            
            # Update cooldown
            try:
                from services.cooldown import CooldownService
                cooldown_service = CooldownService()
                await cooldown_service.update_cooldown(user_id)
            except Exception as e:
                logger.warning(f"Cooldown update failed: {e}")
            
            # Clear user data
            context.user_data.pop('post_data', None)
            context.user_data.pop('waiting_for', None)
            
            # Calculate next post time
            cooldown_minutes = Config.COOLDOWN_SECONDS // 60
            hours = cooldown_minutes // 60
            mins = cooldown_minutes % 60
            
            if hours > 0:
                next_post_time = f"{hours} —á–∞—Å–∞ {mins} –º–∏–Ω—É—Ç"
            else:
                next_post_time = f"{cooldown_minutes} –º–∏–Ω—É—Ç"

            # Show success message with channel promotion
            success_keyboard = [
                [InlineKeyboardButton("üì∫ –¢–æ–ø –∫–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç–∞", url="https://t.me/snghu")],
                [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            
            # =========================
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            # =========================
            await update.callback_query.edit_message_text(
                f"ü§≥ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n"
                f"üìù –≠—Ç–æ—Ç —à–µ–¥–µ–≤—Ä —É–∂–µ –≤ —Ä—É–∫–∞—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!\n"
                f"üì¨ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ\n\n"
                f"üò¥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {next_post_time}\n\n"
                f"üßë‚Äç‚úàÔ∏è *–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —Ç–∞–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —Ç–æ —á—Ç–æ –∏—â–µ—Ç :*",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in send_to_moderation: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def send_to_moderation_group(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   post: Post, user: User):
    """Send post to moderation group with media"""
    bot = context.bot
    
    # =========================
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    # =========================
    mod_text = (
        f"üö® *–ó–∞—è–≤–æ—á–∫–∞ –∑–∞–ª–µ—Ç–µ–ª–∞*\n\n"
        f"üíå –æ—Ç: @{user.username or 'no_username'} (ID: {user.id})\n"
        f"üí• –ü—Ä–∏–º–µ—Ä–Ω–æ –≤: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìö –ò–∑ —Ä–∞–∑–¥–µ–ª–∞: {post.category}"
    )
    
    if post.subcategory:
        mod_text += f" ‚Üí {post.subcategory}"
    
    if post.anonymous:
        mod_text += "\nüé≠ *–ê–Ω–æ–Ω–∏–º–Ω–æ*"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if post.media and len(post.media) > 0:
        mod_text += f"\nüìé –ú–µ–¥–∏–∞: {len(post.media)} —Ñ–∞–π–ª(–æ–≤)"
    
    mod_text += f"\n\nüìù –¢–µ–∫—Å—Ç:\n{post.text}\n\n"
    mod_text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: {' '.join(post.hashtags)}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:approve:{post.id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"mod:edit:{post.id}")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")]
    ]
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å - –ò–°–ü–†–ê–í–õ–ï–ù–û
        media_messages = []
        if post.media and len(post.media) > 0:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –º–µ–¥–∏–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, media_item in enumerate(post.media):
                try:
                    if media_item.get('type') == 'photo':
                        msg = await bot.send_photo(
                            chat_id=Config.MODERATION_GROUP_ID,
                            photo=media_item['file_id'],
                            caption=f"üì∑ –ú–µ–¥–∏–∞ {i+1}/{len(post.media)}"
                        )
                        media_messages.append(msg.message_id)
                    elif media_item.get('type') == 'video':
                        msg = await bot.send_video(
                            chat_id=Config.MODERATION_GROUP_ID,
                            video=media_item['file_id'],
                            caption=f"üé• –ú–µ–¥–∏–∞ {i+1}/{len(post.media)}"
                        )
                        media_messages.append(msg.message_id)
                    elif media_item.get('type') == 'document':
                        msg = await bot.send_document(
                            chat_id=Config.MODERATION_GROUP_ID,
                            document=media_item['file_id'],
                            caption=f"üìÑ –ú–µ–¥–∏–∞ {i+1}/{len(post.media)}"
                        )
                        media_messages.append(msg.message_id)
                except Exception as e:
                    logger.error(f"Error sending media {i+1}: {e}")
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        message = await bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=mod_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        async with db.get_session() as session:
            await session.execute(
                f"UPDATE posts SET moderation_message_id = {message.message_id} WHERE id = {post.id}"
            )
            await session.commit()
        
        logger.info(f"Post {post.id} sent to moderation with {len(media_messages)} media files")
            
    except Exception as e:
        logger.error(f"Error sending to moderation group: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_details = str(e)[:200] + "..." if len(str(e)) > 200 else str(e)
        
        await bot.send_message(
            chat_id=user.id,
            text=(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n`{error_details}`\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏?\n"
                f"‚Ä¢ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã?\n"
                f"‚Ä¢ ID –≥—Ä—É–ø–ø—ã: {Config.MODERATION_GROUP_ID}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            ),
            parse_mode='Markdown'
        )

async def cancel_post_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for cancellation reason"""
    keyboard = [
        [InlineKeyboardButton("ü§∑ –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="pub:cancel_confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ", callback_data="pub:cancel_confirm")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pub:preview")]
    ]
    
    await update.callback_query.edit_message_text(
        "ü§î –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_link_violation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle link violation"""
    await update.message.reply_text(
        "üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n"
        "–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö."
    )
    context.user_data.pop('waiting_for', None)

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit post before sending"""
    context.user_data['waiting_for'] = 'post_text'
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel post creation"""
    context.user_data.pop('post_data', None)
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('cancel_reason', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)
