from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from services.cooldown import CooldownService
from services.hashtags import HashtagService
from services.filter_service import FilterService
from models import User, Post, PostStatus
from sqlalchemy import select
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def handle_publication_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle publication callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "cat":
        # Subcategory selected
        subcategory = data[2] if len(data) > 2 else None
        await start_post_creation(update, context, subcategory)
    elif action == "preview":
        await show_preview(update, context)
    elif action == "send":
        await send_to_moderation(update, context)
    elif action == "edit":
        await edit_post(update, context)
    elif action == "cancel":
        await cancel_post(update, context)
    elif action == "add_media":
        await request_media(update, context)

async def start_post_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str):
    """Start creating a post with selected subcategory"""
    subcategory_names = {
        'work': 'üë∑‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞',
        'rent': 'üè† –ê—Ä–µ–Ω–¥–∞',
        'buy': 'üîª –ö—É–ø–ª—é',
        'sell': 'üî∫ –ü—Ä–æ–¥–∞–º',
        'events': 'üéâ –°–æ–±—ã—Ç–∏—è',
        'free': 'üì¶ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º',
        'important': 'üå™Ô∏è –í–∞–∂–Ω–æ',
        'other': '‚ùî –î—Ä—É–≥–æ–µ'
    }
    
    context.user_data['post_data'] = {
        'category': 'üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç',
        'subcategory': subcategory_names.get(subcategory, '‚ùî –î—Ä—É–≥–æ–µ'),
        'anonymous': False
    }
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu:back")]]
    
    await update.callback_query.edit_message_text(
        f"üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç ‚Üí üó£Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è ‚Üí {subcategory_names.get(subcategory)}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏/–∏–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    context.user_data['waiting_for'] = 'post_text'

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from user"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Text input received. waiting_for: {context.user_data.get('waiting_for')}")
    logger.info(f"User data: {context.user_data}")
    
    if 'waiting_for' not in context.user_data:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    waiting_for = context.user_data['waiting_for']
    text = update.message.text
    
    # Handle different input types
    if waiting_for == 'post_text':
        # Check for links
        filter_service = FilterService()
        if filter_service.contains_banned_link(text) and not Config.is_moderator(update.effective_user.id):
            await handle_link_violation(update, context)
            return
        
        if 'post_data' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
            )
            context.user_data.pop('waiting_for', None)
            return
        
        context.user_data['post_data']['text'] = text
        context.user_data['post_data']['media'] = []
        
        # Ask for media or show preview
        keyboard = [
            [
                InlineKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="pub:add_media"),
                InlineKeyboardButton("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:cancel")]
        ]
        
        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for'] = None
        
    elif waiting_for == 'piar_name':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'name', text)
    elif waiting_for == 'piar_profession':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'profession', text)
    elif waiting_for == 'piar_districts':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'districts', text)
    elif waiting_for == 'piar_phone':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'phone', text)
    elif waiting_for == 'piar_contacts':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'contacts', text)
    elif waiting_for == 'piar_price':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'price', text)
    elif waiting_for == 'piar_description':
        from handlers.piar_handler import handle_piar_text
        await handle_piar_text(update, context, 'description', text)
    else:
        logger.warning(f"Unknown waiting_for state: {waiting_for}")

async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle media input from user"""
    if 'waiting_for' not in context.user_data or context.user_data['waiting_for'] != 'post_media':
        return
    
    if 'post_data' not in context.user_data:
        context.user_data['post_data'] = {'media': []}
    
    media = []
    
    if update.message.photo:
        # Get highest quality photo
        media.append({
            'type': 'photo',
            'file_id': update.message.photo[-1].file_id
        })
    elif update.message.video:
        media.append({
            'type': 'video',
            'file_id': update.message.video.file_id
        })
    elif update.message.document:
        media.append({
            'type': 'document',
            'file_id': update.message.document.file_id
        })
    
    context.user_data['post_data']['media'].extend(media)
    
    keyboard = [
        [
            InlineKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="pub:add_media"),
            InlineKeyboardButton("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="pub:preview")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:cancel")]
    ]
    
    await update.message.reply_text(
        f"‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (–í—Å–µ–≥–æ: {len(context.user_data['post_data']['media'])})\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    context.user_data['waiting_for'] = None

async def request_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request media from user"""
    context.user_data['waiting_for'] = 'post_media'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show post preview"""
    if 'post_data' not in context.user_data:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    post_data = context.user_data['post_data']
    
    # Generate hashtags
    hashtag_service = HashtagService()
    hashtags = hashtag_service.generate_hashtags(
        post_data.get('category'),
        post_data.get('subcategory')
    )
    
    # Build preview text
    preview_text = f"{post_data.get('text', '')}\n\n"
    preview_text += f"{' '.join(hashtags)}\n\n"
    preview_text += Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="pub:send"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="pub:edit")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:cancel")]
    ]
    
    # Send preview with media if exists
    if post_data.get('media'):
        media_group = []
        for i, media_item in enumerate(post_data['media'][:10]):  # Telegram limit
            if media_item['type'] == 'photo':
                media_group.append(InputMediaPhoto(
                    media=media_item['file_id'],
                    caption=preview_text if i == 0 else None
                ))
            elif media_item['type'] == 'video':
                media_group.append(InputMediaVideo(
                    media=media_item['file_id'],
                    caption=preview_text if i == 0 else None
                ))
        
        if media_group:
            await update.callback_query.message.reply_media_group(media_group)
            await update.callback_query.message.reply_text(
                "üëÜ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞*\n\n"
                "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    else:
        await update.callback_query.edit_message_text(
            f"üëÅ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:*\n\n{preview_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def send_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send post to moderation"""
    user_id = update.effective_user.id
    
    # Check cooldown
    cooldown_service = CooldownService()
    can_post, remaining = await cooldown_service.can_post(user_id)
    
    if not can_post:
        minutes = remaining // 60
        await update.callback_query.answer(
            f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π",
            show_alert=True
        )
        return
    
    post_data = context.user_data.get('post_data', {})
    
    # Save to database
    async with db.get_session() as session:
        # Get user
        result = await session.execute(
            select(User).where(User.id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Create post
        hashtag_service = HashtagService()
        hashtags = hashtag_service.generate_hashtags(
            post_data.get('category'),
            post_data.get('subcategory')
        )
        
        post = Post(
            user_id=user_id,
            category=post_data.get('category'),
            subcategory=post_data.get('subcategory'),
            text=post_data.get('text', ''),
            media=post_data.get('media', []),
            hashtags=hashtags,
            anonymous=post_data.get('anonymous', False),
            status=PostStatus.PENDING
        )
        
        session.add(post)
        await session.commit()
        
        # Send to moderation group
        await send_to_moderation_group(update, context, post, user)
        
        # Update cooldown
        await cooldown_service.update_cooldown(user_id)
        
        # Clear user data
        context.user_data.pop('post_data', None)
        context.user_data.pop('waiting_for', None)
        
        await update.callback_query.edit_message_text(
            "‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n"
            "–í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            parse_mode='Markdown'
        )

async def send_to_moderation_group(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   post: Post, user: User):
    """Send post to moderation group"""
    bot = context.bot
    
    # Build moderation message
    mod_text = (
        f"üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é*\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: @{user.username or 'no_username'} (ID: {user.id})\n"
        f"üìÖ –î–∞—Ç–∞: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.category}"
    )
    
    if post.subcategory:
        mod_text += f" ‚Üí {post.subcategory}"
    
    if post.anonymous:
        mod_text += "\nüé≠ *–ê–Ω–æ–Ω–∏–º–Ω–æ*"
    
    mod_text += f"\n\nüìù –¢–µ–∫—Å—Ç:\n{post.text}\n\n"
    mod_text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: {' '.join(post.hashtags)}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:approve:{post.id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"mod:edit:{post.id}")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")]
    ]
    
    try:
        # Send to moderation group
        if post.media:
            # Send with media
            media_group = []
            for i, media_item in enumerate(post.media[:10]):
                if media_item['type'] == 'photo':
                    media_group.append(InputMediaPhoto(
                        media=media_item['file_id'],
                        caption=mod_text if i == 0 else None,
                        parse_mode='Markdown'
                    ))
                elif media_item['type'] == 'video':
                    media_group.append(InputMediaVideo(
                        media=media_item['file_id'],
                        caption=mod_text if i == 0 else None,
                        parse_mode='Markdown'
                    ))
            
            if media_group:
                messages = await bot.send_media_group(
                    chat_id=Config.MODERATION_GROUP_ID,
                    media=media_group
                )
                await bot.send_message(
                    chat_id=Config.MODERATION_GROUP_ID,
                    text="–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–æ–º:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=mod_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error sending to moderation group: {e}")
        await update.callback_query.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            show_alert=True
        )

async def handle_link_violation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle link violation"""
    await update.message.reply_text(
        "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n"
        "–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö."
    )
    context.user_data.pop('waiting_for', None)

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit post before sending"""
    context.user_data['waiting_for'] = 'post_text'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pub:preview")]]
    
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel post creation"""
    context.user_data.pop('post_data', None)
    context.user_data.pop('waiting_for', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)
