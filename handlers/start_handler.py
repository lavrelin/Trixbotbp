from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import secrets
import string

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command with safe DB handling"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    try:
        from services.db import db
        from models import User, Gender
        from sqlalchemy import select
        from datetime import datetime
        
        async with db.get_session() as session:
            # Check if user exists
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # Create new user immediately with default values
                new_user = User(
                    id=user_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    gender=Gender.UNKNOWN,
                    referral_code=generate_referral_code(),
                    created_at=datetime.utcnow()
                    # –£–ë–†–ê–ù updated_at - –µ–≥–æ –Ω–µ—Ç –≤ –ë–î –º–æ–¥–µ–ª–∏
                )
                session.add(new_user)
                await session.commit()
                logger.info(f"Created new user: {user_id}")
                
    except Exception as e:
        logger.warning(f"Could not save user to DB: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ë–î
    
    # Always show main menu
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show new main menu design"""
    
    # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è –ü–∏—Å–∞—Ç—å", callback_data="menu:write")]
    ]
    
    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    text = (
        "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrixBot!*\n\n"
        "üéØ *–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ*\n\n"
        
        "üì∫ *–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:*\n"
        "üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* - –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
        "üôÖ *–ö–∞—Ç–∞–ª–æ–≥* - –≤—Å–µ —É—Å–ª—É–≥–∏ –∏ —Ç–æ–≤–∞—Ä—ã\n\n"
        
        "‚úçÔ∏è *–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?*\n"
        "–ù–∞–∂–º–∏—Ç–µ üö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è *–ü–∏—Å–∞—Ç—å* –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        
        "‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ ‚Ä¢ üéØ –£–¥–æ–±–Ω–æ ‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ"
    )
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await update.effective_message.reply_text(
                "TrixBot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –ë—É–¥–∞–ø–µ—à—Ç–µ\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü–∏—Å–∞—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e2:
            logger.error(f"Fallback menu also failed: {e2}")
            await update.effective_message.reply_text(
                "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )

async def show_write_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show write menu with publication types"""
    
    keyboard = [
        [InlineKeyboardButton("üóØÔ∏è –ü–æ—Å—Ç –≤ –ë—É–¥–∞–ø–µ—à—Ç", callback_data="menu:budapest")],
        [InlineKeyboardButton("üí• –ó–∞—è–≤–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="menu:services")],
        [InlineKeyboardButton("‚ö°Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ", callback_data="menu:actual")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è –ß–∏—Ç–∞—Ç—å", callback_data="menu:read")]
    ]
    
    text = (
        "‚úçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        
        "üóØÔ∏è *–ü–æ—Å—Ç –≤ –ë—É–¥–∞–ø–µ—à—Ç*\n"
        "–û–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥—Å–ª—É—à–∞–Ω–Ω–æ–µ –∏ –∂–∞–ª–æ–±—ã\n\n"
        
        "üí• *–ó–∞—è–≤–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥*\n"
        "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —É—Å–ª—É–≥\n\n"
        
        "‚ö°Ô∏è *–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n"
        "–í–∞–∂–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞\n\n"
        
        "üö∂‚Äç‚ôÄÔ∏è *–ß–∏—Ç–∞—Ç—å* - –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing write menu: {e}")
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update, context)

def generate_referral_code():
    """Generate unique referral code"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))
