from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import secrets
import string

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command with safe DB handling"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    try:
        from services.db import db
        from models import User, Gender
        from sqlalchemy import select
        from datetime import datetime
        
        async with db.get_session() as session:
            # Check if user exists
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # Create new user immediately with default values
                new_user = User(
                    id=user_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    gender=Gender.UNKNOWN,
                    referral_code=generate_referral_code(),
                    created_at=datetime.utcnow()
                )
                session.add(new_user)
                await session.commit()
                logger.info(f"Created new user: {user_id}")
                
    except Exception as e:
        logger.warning(f"Could not save user to DB: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ë–î
    
    # Always show main menu
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show new main menu design"""
    
    keyboard = [
        [InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
        [InlineKeyboardButton("üôÖ‚Äç‚ôÄÔ∏è –ë—É–¥–∞–ø–µ—à—Ç - —á–∞—Ç", url="https://t.me/tgchatxxx")],
        [InlineKeyboardButton("üôÖ –ë—É–¥–∞–ø–µ—à—Ç - –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º", url="https://t.me/hungarytrade")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è –ü–∏—Å–∞—Ç—å", callback_data="menu:write")]
    ]
    
    text = (
    "üëãüèª *–ü—Ä–∏–≤–µ—Ç!*\n"
    "–¢—ã –∑–Ω–∞–∫–æ–º —Å 3Ô∏è‚É£‚úñÔ∏è? –•‚ùå–•‚ùî TRIX ‚Äì —ç—Ç–æ —è‚ùóÔ∏è –ê –∫—Ç–æ —è‚ÅâÔ∏è\n\n"
    "*–¢—Ä–∏–∫—Å* ‚Äì –≥–∏–¥ –∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É –∏ –í–µ–Ω–≥—Ä–∏–∏ üá≠üá∫.\n"
    "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
    "üôÖ‚Äç‚ôÇÔ∏è *–ö–∞–Ω–∞–ª* ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏\n"
    "üôÖ‚Äç‚ôÄÔ∏è *–ß–∞—Ç* ‚Äî –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è\n"
    "üôÖ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥\n"
    "üïµÔ∏è‚Äç‚ôÇÔ∏è *–ö–£–ü* ‚Äî –ë–∞—Ä–∞—Ö–æ–ª–∫–∞: –ö—É–ø–ª—é / –û—Ç–¥–∞–º / –ü—Ä–æ–¥–∞–º\n\n"
    "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å‚ùî*\n"
    "–ù–∞–∂–º–∏—Ç–µüö∂‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è*–ü–∏—Å–∞—Ç—å* –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
    "üèπ –ë—ã—Å—Ç—Ä–æ ‚Ä¢ ‚öîÔ∏è –£–¥–æ–±–Ω–æ ‚Ä¢ üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ\n"
    "üîí –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–æ—Ç–∞ –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã \n"
    
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        try:
            await update.effective_message.reply_text(
                "TrixBot - —Ç–æ–ø –∫–æ–º—å—é–Ω–∏—Ç–∏ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ üá≠üá∫\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü–∏—Å–∞—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e2:
            logger.error(f"Fallback menu also failed: {e2}")
            await update.effective_message.reply_text(
                "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )

async def show_write_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show write menu with publication types"""
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å—Ç –≤ üôÖ‚Äç‚ôÇÔ∏è–ë—É–¥–∞–ø–µ—à—Ç/üïµüèº‚Äç‚ôÄÔ∏è–ö–û–ü", callback_data="menu:budapest")],
        [InlineKeyboardButton("–ó–∞—è–≤–∫–∞ –≤ üôÖ–ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥", callback_data="menu:services")],
        [InlineKeyboardButton("‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ", callback_data="menu:actual")],
        [InlineKeyboardButton("üö∂‚Äç‚ôÄÔ∏è–ß–∏—Ç–∞—Ç—å", callback_data="menu:read")]
    ]
    
    text = (
        "üß∑ *–í—ã–±–æ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤*\n\n"
        
        "*–ü–æ—Å—Ç –≤ üôÖ‚Äç‚ôÇÔ∏è–ë—É–¥–∞–ø–µ—à—Ç/üïµüèº‚Äç‚ôÄÔ∏è–ö–û–ü*\n"
        "–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç: –û–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥—Å–ª—É—à–∞–Ω–æ, –≤–∞–∂–Ω–æ–µ\n"
        "–ö–∞–Ω–∞–ª –ö—É–ø–ª—é/–û—Ç–¥–∞–º/–ü—Ä–æ–¥–∞–º: –≥–ª–∞–≤–Ω–∞—è –±–∞—Ä–∞—Ö–æ–ª–∫–∞ –ë—É–¥–∞–ø–µ—à—Ç–∞ –∏ üá≠üá∫.\n\n"
        
        "*–ó–∞—è–≤–∫–∞ –≤ üìÇ–ö–∞—Ç–∞–ª–æ–≥ –£—Å–ª—É–≥*\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ë—É–¥–∞–ø–µ—à—Ç–∞. –†–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ #Ô∏è‚É£—Ö–µ—à—Ç–µ–≥–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º‚ùï\n"
        "(–ü—Ä–∏–º–µ—Ä—ã: –º–∞–Ω–∏–∫—é—Ä, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, —Ç—Ä–µ–Ω–µ—Ä, –≤—Ä–∞—á –∏)\n\n"
        
        "*‚ö°Ô∏è–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ*\n"
        "–í–∞–∂–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ —á–∞—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è‚ùï\n"
        "(–ü—Ä–∏–º–µ—Ä—ã: –Ω—É–∂–µ–Ω —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ —Å–µ–≥–æ–¥–Ω—è; –ü–æ—Ç–µ—Ä—è–ª–∞—Å—å üê∂ –≤ 13 —Ä–∞–π–æ–Ω–µ; "
        "–ò—â—É üöê –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞; –í –ø–æ–∏—Å–∫–µ üë∑üèΩ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî –æ–ø–ª–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è)\n\n"
        
        "*üö∂‚Äç‚ôÄÔ∏è –ß–∏—Ç–∞—Ç—å* - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error showing write menu: {e}")
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update, context)

def generate_referral_code():
    """Generate unique referral code"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))
