from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes
from config import Config
import logging
from models import Post, User

logger = logging.getLogger(__name__)

# Piar form steps - –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å 8 —à–∞–≥–æ–≤
PIAR_STEPS = [
    ('name', '–ò–º—è', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'),
    ('profession', '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:'),
    ('districts', '–†–∞–π–æ–Ω—ã', '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω—ã (–¥–æ 3, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):'),
    ('phone', '–¢–µ–ª–µ—Ñ–æ–Ω', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'),
    ('instagram', 'Instagram', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'),
    ('telegram', 'Telegram', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'),
    ('price', '–¶–µ–Ω–∞', '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —É—Å–ª—É–≥–∏:'),
    ('description', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —É—Å–ª—É–≥:')
]

async def handle_piar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle piar callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "preview":
        await show_piar_preview(update, context)
    elif action == "send":
        await send_piar_to_moderation(update, context)
    elif action == "edit":
        await restart_piar_form(update, context)
    elif action == "cancel":
        await cancel_piar(update, context)
    elif action == "add_photo":
        await request_piar_photo(update, context)
    elif action == "skip_photo":
        await show_piar_preview(update, context)
    elif action == "next_photo":
        await show_piar_preview(update, context)
    elif action == "back":
        await go_back_step(update, context)

async def handle_piar_text(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           field: str, value: str):
    """Handle text input for piar form"""
    if 'piar_data' not in context.user_data:
        context.user_data['piar_data'] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    context.user_data['piar_step'] = field
    
    # Validate and save field
    if field == 'name':
        if len(value) > 100:
            await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['name'] = value
        next_step = 'profession'
        
    elif field == 'profession':
        if len(value) > 100:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['profession'] = value
        next_step = 'districts'
        
    elif field == 'districts':
        districts = [d.strip() for d in value.split(',')][:3]
        if not districts:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω")
            return
        context.user_data['piar_data']['districts'] = districts
        next_step = 'phone'
        
    elif field == 'phone':
        if value != '-':
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = value.strip()
            if len(phone) < 7:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return
            context.user_data['piar_data']['phone'] = phone
        else:
            context.user_data['piar_data']['phone'] = None
        next_step = 'instagram'
        
    elif field == 'instagram':
        if value != '-':
            instagram = value.strip()
            if instagram.startswith('@'):
                instagram = instagram[1:]
            if instagram and len(instagram) < 3:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è Instagram")
                return
            context.user_data['piar_data']['instagram'] = instagram if instagram else None
        else:
            context.user_data['piar_data']['instagram'] = None
        next_step = 'telegram'
        
    elif field == 'telegram':
        if value != '-':
            telegram = value.strip()
            if not telegram.startswith('@'):
                telegram = f"@{telegram}"
            if len(telegram) < 4:  # –º–∏–Ω–∏–º—É–º @abc
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è Telegram")
                return
            context.user_data['piar_data']['telegram'] = telegram
        else:
            context.user_data['piar_data']['telegram'] = None
        next_step = 'price'
        
    elif field == 'price':
        if len(value) > 100:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['price'] = value
        next_step = 'description'
        
    elif field == 'description':
        if len(value) > 1000:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        context.user_data['piar_data']['description'] = value
        next_step = 'photos'
    
    else:
        return
    
    # Show next step or photo request
    if next_step == 'photos':
        context.user_data['piar_data']['photos'] = []
        context.user_data['piar_data']['media'] = []
        context.user_data['waiting_for'] = 'piar_photo'
        
        keyboard = [
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="piar:skip_photo")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
        ]
        
        await update.message.reply_text(
            "üì∑ *–®–∞–≥ 8 - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        # Find next step info
        for i, (step_field, step_name, step_text) in enumerate(PIAR_STEPS):
            if step_field == next_step:
                step_num = i + 1
                break
        
        context.user_data['waiting_for'] = f'piar_{next_step}'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
        keyboard = []
        if step_num > 1:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")])
        
        await update.message.reply_text(
            f"üíº *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É*\n\n"
            f"–®–∞–≥ {step_num} –∏–∑ 8\n"
            f"{step_text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle photo input for piar"""
    if 'waiting_for' not in context.user_data or context.user_data['waiting_for'] != 'piar_photo':
        return
    
    if 'piar_data' not in context.user_data:
        return
    
    if 'photos' not in context.user_data['piar_data']:
        context.user_data['piar_data']['photos'] = []
    
    if 'media' not in context.user_data['piar_data']:
        context.user_data['piar_data']['media'] = []
    
    photos = context.user_data['piar_data']['photos']
    media = context.user_data['piar_data']['media']
    
    if len(photos) >= Config.MAX_PHOTOS_PIAR:
        await update.message.reply_text(
            f"‚ùå –ú–∞–∫—Å–∏–º—É–º {Config.MAX_PHOTOS_PIAR} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        )
        return
    
    media_added = False
    if update.message.photo:
        photos.append(update.message.photo[-1].file_id)
        media.append({'type': 'photo', 'file_id': update.message.photo[-1].file_id})
        media_added = True
    elif update.message.video:
        photos.append(update.message.video.file_id)
        media.append({'type': 'video', 'file_id': update.message.video.file_id})
        media_added = True
    
    if media_added:
        remaining = Config.MAX_PHOTOS_PIAR - len(photos)
        
        keyboard = []
        
        if remaining > 0:
            keyboard.append([
                InlineKeyboardButton(f"üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ({remaining})", 
                                   callback_data="piar:add_photo")
            ])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"
        keyboard.append([
            InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª—å—à–µ", callback_data="piar:next_photo")
        ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")])
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (–í—Å–µ–≥–æ: {len(photos)})\n\n"
            f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def request_piar_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Request more photos"""
    context.user_data['waiting_for'] = 'piar_photo'
    
    photos_count = len(context.user_data.get('piar_data', {}).get('photos', []))
    remaining = Config.MAX_PHOTOS_PIAR - photos_count
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª—å—à–µ", callback_data="piar:next_photo")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
    ]
    
    await update.callback_query.edit_message_text(
        f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_piar_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show piar preview with media"""
    if 'piar_data' not in context.user_data:
        await update.callback_query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    data = context.user_data['piar_data']
    
    # Build preview text
    text = "üíº *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä*\n\n"
    text += f"üë§ *–ò–º—è:* {data.get('name')}\n"
    text += f"üíº *–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {data.get('profession')}\n"
    text += f"üìç *–†–∞–π–æ–Ω—ã:* {', '.join(data.get('districts', []))}\n"
    
    if data.get('phone'):
        text += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}\n"
    
    # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts = []
    if data.get('instagram'):
        contacts.append(f"üì∑ Instagram: @{data.get('instagram')}")
    if data.get('telegram'):
        contacts.append(f"üì± Telegram: {data.get('telegram')}")
    
    if contacts:
        text += f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n{chr(10).join(contacts)}\n"
    
    text += f"üí∞ *–¶–µ–Ω–∞:* {data.get('price')}\n\n"
    text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{data.get('description')}\n\n"
    
    if data.get('photos'):
        text += f"üì∑ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(data['photos'])}\n\n"
    
    text += "#–£—Å–ª—É–≥–∏ #–ë–∏–∑–Ω–µ—Å–ë—É–¥–∞–ø–µ—à—Ç\n\n"
    text += Config.DEFAULT_SIGNATURE
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data="piar:send"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="piar:edit")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")]
    ]
    
    # Send photos preview if exist
    if data.get('media'):
        try:
            for media_item in data['media'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –º–µ–¥–∏–∞
                if media_item.get('type') == 'photo':
                    await update.effective_message.reply_photo(
                        photo=media_item['file_id'],
                        caption="üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"
                    )
                elif media_item.get('type') == 'video':
                    await update.effective_message.reply_video(
                        video=media_item['file_id'],
                        caption="üé• –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
                    )
        except Exception as e:
            logger.error(f"Error showing piar media preview: {e}")
    
    # Send preview text
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        else:
            await update.effective_message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error showing piar preview: {e}")
        await update.effective_message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def send_piar_to_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send piar to moderation with safe DB handling"""
    user_id = update.effective_user.id
    data = context.user_data.get('piar_data', {})
    
    try:
        from services.db import db
        from models import User, Post
        from sqlalchemy import select
        
        async with db.get_session() as session:
            # Get user
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # Create piar post with safe field handling
            post_data = {
                'user_id': user_id,
                'category': 'üíº –£—Å–ª—É–≥–∏',
                'text': data.get('description', ''),
                'hashtags': ['#–£—Å–ª—É–≥–∏', '#–ë–∏–∑–Ω–µ—Å–ë—É–¥–∞–ø–µ—à—Ç'],
                'is_piar': True,
                'piar_name': data.get('name'),
                'piar_profession': data.get('profession'),
                'piar_districts': data.get('districts'),
                'piar_phone': data.get('phone'),
                'piar_price': data.get('price'),
                'media': data.get('media', [])
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏
            try:
                post_data['piar_instagram'] = data.get('instagram')
                post_data['piar_telegram'] = data.get('telegram')
            except:
                # –ï—Å–ª–∏ –ø–æ–ª–µ–π –Ω–µ—Ç –≤ –ë–î, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning("New piar fields not available in DB model")
            
            post = Post(**post_data)
            session.add(post)
            await session.commit()
            
            # Send to moderation group
            await send_piar_to_mod_group(update, context, post, user, data)
            
            # Clear user data
            context.user_data.pop('piar_data', None)
            context.user_data.pop('waiting_for', None)
            context.user_data.pop('piar_step', None)
            
            # Calculate next post time
            cooldown_minutes = Config.COOLDOWN_SECONDS // 60
            hours = cooldown_minutes // 60
            mins = cooldown_minutes % 60
            
            if hours > 0:
                next_post_time = f"{hours} —á–∞—Å–∞ {mins} –º–∏–Ω—É—Ç"
            else:
                next_post_time = f"{cooldown_minutes} –º–∏–Ω—É—Ç"
            
            # Show success message with channel promotion
            success_keyboard = [
                [InlineKeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
                [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
            ]
            
            await update.callback_query.edit_message_text(
                f"‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
                f"‚è∞ –°–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {next_post_time}\n\n"
                f"üîî *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in send_piar_to_moderation: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def send_piar_to_mod_group(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 post: Post, user: User, data: dict):
    """Send piar to moderation group with improved error handling"""
    bot = context.bot
    
    text = (
        f"üíº *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –£—Å–ª—É–≥–∞*\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: @{user.username or 'no_username'} (ID: {user.id})\n"
        f"üìÖ –î–∞—Ç–∞: {post.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"*–î–∞–Ω–Ω—ã–µ:*\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data.get('profession')}\n"
        f"üìç –†–∞–π–æ–Ω—ã: {', '.join(data.get('districts', []))}\n"
    )
    
    if data.get('phone'):
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
    
    # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    contacts = []
    if data.get('instagram'):
        contacts.append(f"üì∑ Instagram: @{data.get('instagram')}")
    if data.get('telegram'):
        contacts.append(f"üì± Telegram: {data.get('telegram')}")
    
    if contacts:
        text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{chr(10).join(contacts)}\n"
    
    text += f"üí∞ –¶–µ–Ω–∞: {data.get('price')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    if data.get('media') and len(data['media']) > 0:
        text += f"üìé –ú–µ–¥–∏–∞: {len(data['media'])} —Ñ–∞–π–ª(–æ–≤)\n"
    
    text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{data.get('description')}"
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url=f"tg://user?id={user.id}")],
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"mod:approve:{post.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod:reject:{post.id}")
        ]
    ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.get_chat(Config.MODERATION_GROUP_ID)
        except Exception as e:
            logger.error(f"Cannot access moderation group {Config.MODERATION_GROUP_ID}: {e}")
            await bot.send_message(
                chat_id=user.id,
                text="‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        media_sent = []
        if data.get('media') and len(data['media']) > 0:
            for i, media_item in enumerate(data['media']):
                try:
                    if media_item.get('type') == 'photo':
                        msg = await bot.send_photo(
                            chat_id=Config.MODERATION_GROUP_ID,
                            photo=media_item['file_id'],
                            caption=f"üì∑ –ú–µ–¥–∏–∞ {i+1}/{len(data['media'])}"
                        )
                        media_sent.append(msg.message_id)
                    elif media_item.get('type') == 'video':
                        msg = await bot.send_video(
                            chat_id=Config.MODERATION_GROUP_ID,
                            video=media_item['file_id'],
                            caption=f"üé• –ú–µ–¥–∏–∞ {i+1}/{len(data['media'])}"
                        )
                        media_sent.append(msg.message_id)
                except Exception as media_error:
                    logger.error(f"Error sending piar media {i+1}: {media_error}")
                    continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            message = await bot.send_message(
                chat_id=Config.MODERATION_GROUP_ID,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            logger.info(f"Piar sent to moderation successfully. Post ID: {post.id}")
            
        except Exception as text_error:
            logger.error(f"Error sending piar text message: {text_error}")
            raise text_error
            
    except Exception as e:
        logger.error(f"Error sending piar to moderation: {e}")
        await bot.send_message(
            chat_id=user.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        )

async def go_back_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to previous step in piar form"""
    current_step = context.user_data.get('piar_step')
    
    if not current_step:
        await restart_piar_form(update, context)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    step_order = ['name', 'profession', 'districts', 'phone', 'instagram', 'telegram', 'price', 'description']
    
    try:
        current_index = step_order.index(current_step)
        if current_index > 0:
            prev_step = step_order[current_index - 1]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
            for i, (step_field, step_name, step_text) in enumerate(PIAR_STEPS):
                if step_field == prev_step:
                    step_num = i + 1
                    
                    context.user_data['waiting_for'] = f'piar_{prev_step}'
                    context.user_data['piar_step'] = prev_step
                    
                    keyboard = []
                    if step_num > 1:
                        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="piar:back")])
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="piar:cancel")])
                    
                    await update.callback_query.edit_message_text(
                        f"üíº *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É*\n\n"
                        f"–®–∞–≥ {step_num} –∏–∑ 8\n"
                        f"{step_text}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    break
        else:
            await restart_piar_form(update, context)
    except:
        await restart_piar_form(update, context)

async def restart_piar_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart piar form from beginning"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    context.user_data['piar_step'] = 'name'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu:back")]]
    
    await update.callback_query.edit_message_text(
        "üíº *–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥—É*\n\n"
        "–®–∞–≥ 1 –∏–∑ 8\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def cancel_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel piar creation"""
    context.user_data.pop('piar_data', None)
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('piar_step', None)
    
    from handlers.start_handler import show_main_menu
    await show_main_menu(update, context)
