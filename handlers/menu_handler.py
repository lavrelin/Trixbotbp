from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle menu callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    logger.info(f"Menu callback action: {action}")
    
    if action == "budapest":
        await show_budapest_menu(update, context)
    elif action == "search":
        await start_search(update, context)
    elif action == "catalog":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        await show_catalog(update, context)
    elif action == "piar":
        await start_piar(update, context)
    elif action == "profile":
        from handlers.profile_handler import show_profile
        await show_profile(update, context)
    elif action == "help":
        from handlers.start_handler import help_command
        await help_command(update, context)
    elif action == "back":
        from handlers.start_handler import show_main_menu
        await show_main_menu(update, context)
    elif action == "announcements":
        await show_announcements_menu(update, context)
    elif action == "news":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "üì∫ –ù–æ–≤–æ—Å—Ç–∏")
    elif action == "overheard":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "ü§ê –ü–æ–¥—Å–ª—É—à–∞–Ω–æ", anonymous=True)
    elif action == "complaints":
        await start_category_post(update, context, "üóØÔ∏è –ë—É–¥–∞–ø–µ—à—Ç", "ü§Æ –ñ–∞–ª–æ–±—ã", anonymous=True)
    else:
        logger.warning(f"Unknown menu action: {action}")
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def show_budapest_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show Budapest category menu"""
    keyboard = [
        [InlineKeyboardButton("üó£Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="menu:announcements")],
        [InlineKeyboardButton("üì∫ –ù–æ–≤–æ—Å—Ç–∏", callback_data="menu:news")],
        [InlineKeyboardButton("ü§ê –ü–æ–¥—Å–ª—É—à–∞–Ω–æ (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="menu:overheard")],
        [InlineKeyboardButton("ü§Æ –ñ–∞–ª–æ–±—ã (–∞–Ω–æ–Ω–∏–º–Ω–æ)", callback_data="menu:complaints")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ]
    
    text = (
        "üóØÔ∏è *–ë—É–¥–∞–ø–µ—à—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        "üó£Ô∏è *–û–±—ä—è–≤–ª–µ–Ω–∏—è* - —Ä–∞–±–æ—Ç–∞, –∞—Ä–µ–Ω–¥–∞, –∫—É–ø–ª—è/–ø—Ä–æ–¥–∞–∂–∞\n"
        "üì∫ *–ù–æ–≤–æ—Å—Ç–∏* - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "ü§ê *–ü–æ–¥—Å–ª—É—à–∞–Ω–æ* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
        "ü§Æ *–ñ–∞–ª–æ–±—ã* - –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∂–∞–ª–æ–±—ã\n"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in show_budapest_menu: {e}")
        await update.callback_query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def show_announcements_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show announcements subcategories"""
    keyboard = [
        [
            InlineKeyboardButton("üë∑‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç–∞", callback_data="pub:cat:work"),
            InlineKeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞", callback_data="pub:cat:rent")
        ],
        [
            InlineKeyboardButton("üîª –ö—É–ø–ª—é", callback_data="pub:cat:buy"),
            InlineKeyboardButton("üî∫ –ü—Ä–æ–¥–∞–º", callback_data="pub:cat:sell")
        ],
        [
            InlineKeyboardButton("üéâ –°–æ–±—ã—Ç–∏—è", callback_data="pub:cat:events"),
            InlineKeyboardButton("üì¶ –û—Ç–¥–∞–º –¥–∞—Ä–æ–º", callback_data="pub:cat:free")
        ],
        [
            InlineKeyboardButton("üå™Ô∏è –í–∞–∂–Ω–æ", callback_data="pub:cat:important"),
            InlineKeyboardButton("‚ùî –î—Ä—É–≥–æ–µ", callback_data="pub:cat:other")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:budapest")]
    ]
    
    text = (
        "üó£Ô∏è *–û–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start search post creation"""
    context.user_data['post_data'] = {
        'category': 'üïµÔ∏è –ü–æ–∏—Å–∫',
        'subcategory': None,
        'anonymous': False
    }
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    
    text = (
        "üïµÔ∏è *–ü–æ–∏—Å–∫*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ? (–≤–µ—â–∏, —Ä–∞–±–æ—Ç—É, –ª—é–¥–µ–π, —É—Å–ª—É–≥–∏)"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'post_text'
    except Exception as e:
        logger.error(f"Error in start_search: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show catalog link"""
    keyboard = [
        [InlineKeyboardButton("üìö –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", url="https://t.me/trixvault")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ]
    
    text = (
        "üìö *–ö–∞—Ç–∞–ª–æ–≥ TRIX*\n\n"
        "–ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥, —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥:"
    )
    
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def start_piar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Piar form"""
    context.user_data['piar_data'] = {}
    context.user_data['waiting_for'] = 'piar_name'
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    
    text = (
        "‚≠êÔ∏è *–ü–∏–∞—Ä - –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞*\n\n"
        "–®–∞–≥ 1 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in start_piar: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def start_category_post(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              category: str, subcategory: str, anonymous: bool = False):
    """Start post creation for specific category"""
    context.user_data['post_data'] = {
        'category': category,
        'subcategory': subcategory,
        'anonymous': anonymous
    }
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:budapest")]]
    
    anon_text = " (–∞–Ω–æ–Ω–∏–º–Ω–æ)" if anonymous else ""
    
    text = (
        f"{category} ‚Üí {subcategory}{anon_text}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:"
    )
    
    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'post_text'
    except Exception as e:
        logger.error(f"Error in start_category_post: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
