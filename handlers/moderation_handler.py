from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks with BigInt support"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    logger.info(f"Moderation callback from user {user_id}")
    logger.info(f"Is moderator check: {Config.is_moderator(user_id)}")
    
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        logger.warning(f"Access denied for user {user_id}")
        return
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    logger.info(f"Moderation callback: action={action}, post_id={post_id}, user_id={user_id}")
    
    if action == "approve" and post_id:
        await start_approve_process(update, context, post_id)
    elif action == "approve_chat" and post_id:  # –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        await start_approve_process(update, context, post_id, chat=True)
    elif action == "reject" and post_id:
        await start_reject_process(update, context, post_id)
    elif action == "edit" and post_id:
        await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    else:
        logger.error(f"Unknown action or missing post_id: action={action}, post_id={post_id}")
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from moderators"""
    user_id = update.effective_user.id
    
    logger.info(f"Moderation text from user {user_id}: {update.message.text[:50]}...")
    
    if not Config.is_moderator(user_id):
        logger.warning(f"Non-moderator {user_id} tried to send moderation text")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    waiting_for = context.user_data.get('mod_waiting_for')
    logger.info(f"Moderator {user_id} sent text, waiting_for: {waiting_for}")
    
    if waiting_for == 'approve_link':
        await process_approve_with_link(update, context)
    elif waiting_for == 'reject_reason':
        await process_reject_with_reason(update, context)
    else:
        logger.info(f"Moderator {user_id} sent text but not in moderation process")

async def start_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, chat: bool = False):
    """Start approval process - ask for publication link"""
    try:
        logger.info(f"Starting approve process for post {post_id}")
        
        try:
            from services.db import db
            from models import Post
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"Post {post_id} not found")
                    await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                    
                logger.info(f"Found post {post_id}, user {post.user_id}")
                
        except Exception as db_error:
            logger.error(f"Database error when getting post {post_id}: {db_error}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # Store post info for later use
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'approve_link'
        context.user_data['mod_is_chat'] = chat
        
        logger.info(f"Stored context data for approval: {context.user_data}")
        
        # Ask moderator for publication link
        destination = "—á–∞—Ç–µ" if chat else "–∫–∞–Ω–∞–ª–µ"
        await update.callback_query.edit_message_text(
            f"‚úÖ **–û–î–û–ë–†–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
            f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
            f"üìé **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ {destination}:**\n"
            f"(–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/snghu/1234)\n\n"
            f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {post.user_id}"
        )
        
    except Exception as e:
        logger.error(f"Error starting approve process for post {post_id}: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

async def start_reject_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Start rejection process - ask for reason"""
    try:
        logger.info(f"Starting reject process for post {post_id}")
        
        try:
            from services.db import db
            from models import Post
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if not post:
                    logger.error(f"Post {post_id} not found")
                    await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                    
                logger.info(f"Found post {post_id}, user {post.user_id}")
                
        except Exception as db_error:
            logger.error(f"Database error when getting post {post_id}: {db_error}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # Store post info for later use
        context.user_data['mod_post_id'] = post_id
        context.user_data['mod_post_user_id'] = post.user_id
        context.user_data['mod_waiting_for'] = 'reject_reason'
        
        logger.info(f"Stored context data for rejection: {context.user_data}")
        
        # Ask moderator for rejection reason
        await update.callback_query.edit_message_text(
            f"‚ùå **–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
            f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
            f"üìù **–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**\n"
            f"(–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)\n\n"
            f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
            f"üìä Post ID: {post_id}\n"
            f"üë§ User ID: {post.user_id}"
        )
        
    except Exception as e:
        logger.error(f"Error starting reject process for post {post_id}: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

async def process_approve_with_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process approval with publication link"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        is_chat = context.user_data.get('mod_is_chat', False)
        
        logger.info(f"Processing approval: post_id={post_id}, user_id={user_id}, link={link}")
        
        if not post_id or not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Update post status in DB - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
        try:
            from services.db import db
            from models import Post, PostStatus
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if post:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º enum PostStatus –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                    post.status = PostStatus.APPROVED  # –í–º–µ—Å—Ç–æ 'approved'
                    await session.commit()
                    logger.info(f"Updated post {post_id} status to approved")
                else:
                    logger.error(f"Post {post_id} not found for status update")
                    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                    
        except Exception as db_error:
            logger.error(f"Database error updating post {post_id}: {db_error}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")
            return
        
        # Send notification to user
        try:
            destination_text = "—á–∞—Ç–µ" if is_chat else "–∫–∞–Ω–∞–ª–µ"
            success_keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=link)],
                [InlineKeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
                [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")]
            ]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                     f"üìù –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {destination_text}.\n\n"
                     f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:**\n{link}\n\n"
                     f"üîî *–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚úÖ **–ó–ê–Ø–í–ö–ê –û–î–û–ë–†–ï–ù–ê**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                f"üìä Post ID: {post_id}",
                parse_mode='Markdown'
            )
            
            logger.info(f"Successfully approved post {post_id} for user {user_id}")
            
        except Exception as notify_error:
            logger.error(f"Error notifying user {user_id}: {notify_error}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # Clear context
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        context.user_data.pop('mod_is_chat', None)
        
    except Exception as e:
        logger.error(f"Error processing approval: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è")

async def process_reject_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process rejection with reason"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        
        logger.info(f"Processing rejection: post_id={post_id}, user_id={user_id}, reason={reason[:50]}...")
        
        if not post_id or not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Update post status in DB - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
        try:
            from services.db import db
            from models import Post, PostStatus
            from sqlalchemy import select
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Post).where(Post.id == post_id)
                )
                post = result.scalar_one_or_none()
                
                if post:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º enum PostStatus –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                    post.status = PostStatus.REJECTED  # –í–º–µ—Å—Ç–æ 'rejected'
                    await session.commit()
                    logger.info(f"Updated post {post_id} status to rejected")
                else:
                    logger.error(f"Post {post_id} not found for status update")
                    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                    
        except Exception as db_error:
            logger.error(f"Database error updating post {post_id}: {db_error}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")
            return
        
        # Send notification to user
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                     f"üìù **–ü—Ä–∏—á–∏–Ω–∞:**\n{reason}\n\n"
                     f"üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, —É—á—Ç—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚ùå **–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üìä Post ID: {post_id}",
                parse_mode='Markdown'
            )
            
            logger.info(f"Successfully rejected post {post_id} for user {user_id}")
            
        except Exception as notify_error:
            logger.error(f"Error notifying user {user_id}: {notify_error}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # Clear context
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        
    except Exception as e:
        logger.error(f"Error processing rejection: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def approve_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_approve_process(update, context, post_id)

async def approve_post_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_approve_process(update, context, post_id, chat=True)

async def reject_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_reject_process(update, context, post_id)

async def publish_to_channel(bot, post):
    """Publish post to target channel - DEPRECATED"""
    logger.warning("publish_to_channel called but manual publication is now used")

async def publish_to_chat(bot, post):
    """Publish post to target CHAT - DEPRECATED"""
    logger.warning("publish_to_chat called but manual publication is now used")
