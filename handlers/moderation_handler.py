from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
import logging

logger = logging.getLogger(__name__)

async def handle_moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle moderation callbacks with BigInt support"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    post_id = int(data[2]) if len(data) > 2 and data[2].isdigit() else None
    
    if action == "approve" and post_id:
        await start_approve_process(update, context, post_id)
    elif action == "approve_chat" and post_id:  # –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        await start_approve_process(update, context, post_id, chat=True)
    elif action == "reject" and post_id:
        await start_reject_process(update, context, post_id)
    elif action == "edit" and post_id:
        await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

async def handle_moderation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input from moderators"""
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    waiting_for = context.user_data.get('mod_waiting_for')
    
    if waiting_for == 'approve_link':
        await process_approve_with_link(update, context)
    elif waiting_for == 'reject_reason':
        await process_reject_with_reason(update, context)

async def start_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int, chat: bool = False):
    """Start approval process - ask for publication link"""
    try:
        from services.db import db
        
        async with db.get_session() as session:
            # Get post safely
            post = await safe_get_post(session, post_id)
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # Store post info for later use
            context.user_data['mod_post_id'] = post_id
            context.user_data['mod_post_user_id'] = post.user_id
            context.user_data['mod_waiting_for'] = 'approve_link'
            context.user_data['mod_is_chat'] = chat
            
            # Ask moderator for publication link
            destination = "—á–∞—Ç–µ" if chat else "–∫–∞–Ω–∞–ª–µ"
            await update.callback_query.edit_message_text(
                f"‚úÖ **–û–î–û–ë–†–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
                f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
                f"üìé **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ {destination}:**\n"
                f"(–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/snghu/1234)\n\n"
                f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error starting approve process for post {post_id}: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

async def start_reject_process(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Start rejection process - ask for reason"""
    try:
        from services.db import db
        
        async with db.get_session() as session:
            # Get post safely
            post = await safe_get_post(session, post_id)
            
            if not post:
                await update.callback_query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # Store post info for later use
            context.user_data['mod_post_id'] = post_id
            context.user_data['mod_post_user_id'] = post.user_id
            context.user_data['mod_waiting_for'] = 'reject_reason'
            
            # Ask moderator for rejection reason
            await update.callback_query.edit_message_text(
                f"‚ùå **–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò**\n\n"
                f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
                f"üìù **–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**\n"
                f"(–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)\n\n"
                f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error starting reject process for post {post_id}: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

async def process_approve_with_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process approval with publication link"""
    try:
        link = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        is_chat = context.user_data.get('mod_is_chat', False)
        
        if not post_id or not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Update post status in DB
        from services.db import db
        async with db.get_session() as session:
            success = await safe_update_post_status(session, post_id, 'approved')
            
            if not success:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")
                return
        
        # Send notification to user
        try:
            destination_text = "—á–∞—Ç–µ" if is_chat else "–∫–∞–Ω–∞–ª–µ"
            success_keyboard = [
                [InlineKeyboardButton("üì∫ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=link)],
                [InlineKeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/snghu")],
                [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/trixvault")]
            ]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                     f"üìù –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {destination_text}.\n\n"
                     f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:**\n{link}\n\n"
                     f"üîî *–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*",
                reply_markup=InlineKeyboardMarkup(success_keyboard),
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚úÖ **–ó–ê–Ø–í–ö–ê –û–î–û–ë–†–ï–ù–ê**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                f"üìä Post ID: {post_id}",
                parse_mode='Markdown'
            )
            
        except Exception as notify_error:
            logger.error(f"Error notifying user {user_id}: {notify_error}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # Clear context
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        context.user_data.pop('mod_is_chat', None)
        
    except Exception as e:
        logger.error(f"Error processing approval: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è")

async def process_reject_with_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process rejection with reason"""
    try:
        reason = update.message.text.strip()
        post_id = context.user_data.get('mod_post_id')
        user_id = context.user_data.get('mod_post_user_id')
        
        if not post_id or not user_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Update post status in DB
        from services.db import db
        async with db.get_session() as session:
            success = await safe_update_post_status(session, post_id, 'rejected')
            
            if not success:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")
                return
        
        # Send notification to user
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                     f"üìù **–ü—Ä–∏—á–∏–Ω–∞:**\n{reason}\n\n"
                     f"üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, —É—á—Ç—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.",
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚ùå **–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üìä Post ID: {post_id}",
                parse_mode='Markdown'
            )
            
        except Exception as notify_error:
            logger.error(f"Error notifying user {user_id}: {notify_error}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"User ID: {user_id}\nPost ID: {post_id}"
            )
        
        # Clear context
        context.user_data.pop('mod_post_id', None)
        context.user_data.pop('mod_post_user_id', None)
        context.user_data.pop('mod_waiting_for', None)
        
    except Exception as e:
        logger.error(f"Error processing rejection: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

async def safe_get_post(session, post_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö ID"""
    try:
        from sqlalchemy import text
        
        result = await session.execute(
            text("""
                SELECT id, user_id, category, subcategory, text, media, hashtags, 
                       anonymous, status, created_at, is_piar
                FROM posts WHERE id = :post_id
            """),
            {"post_id": str(post_id)}
        )
        row = result.fetchone()
        
        if row:
            from models import Post
            post = Post()
            post.id = int(row[0])
            post.user_id = int(row[1]) 
            post.category = row[2]
            post.subcategory = row[3]
            post.text = row[4]
            post.media = row[5] if row[5] else []
            post.hashtags = row[6] if row[6] else []
            post.anonymous = row[7]
            post.status = row[8]
            post.created_at = row[9]
            post.is_piar = row[10] if row[10] else False
            return post
        return None
        
    except Exception as e:
        logger.error(f"Error getting post {post_id}: {e}")
        return None

async def safe_update_post_status(session, post_id, status):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞"""
    try:
        from sqlalchemy import text
        
        await session.execute(
            text("UPDATE posts SET status = :status WHERE id = :post_id"),
            {"status": status, "post_id": str(post_id)}
        )
        await session.commit()
        return True
        
    except Exception as e:
        logger.error(f"Error updating post {post_id}: {e}")
        return False

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö)
async def approve_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_approve_process(update, context, post_id)

async def approve_post_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_approve_process(update, context, post_id, chat=True)

async def reject_post(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: int):
    """Legacy function - redirects to new process"""
    await start_reject_process(update, context, post_id)

async def publish_to_channel(bot, post):
    """Publish post to target channel - DEPRECATED"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ä—É—á–Ω—É—é
    logger.warning("publish_to_channel called but manual publication is now used")

async def publish_to_chat(bot, post):
    """Publish post to target CHAT - DEPRECATED"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ä—É—á–Ω—É—é
    logger.warning("publish_to_chat called but manual publication is now used")
