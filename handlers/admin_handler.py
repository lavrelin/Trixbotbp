from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import Config
from services.db import db
from models import User
from sqlalchemy import select
import logging
import re
import requests
import asyncio
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# ============= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =============

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /admin command"""
    user_id = update.effective_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin:manage")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ]
    
    await update.message.reply_text(
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /stats command"""
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from services.db import db
        from models import User, Post
        from sqlalchemy import select, func
        
        async with db.get_session() as session:
            # Count users
            users_count = await session.scalar(select(func.count(User.id)))
            
            # Count posts
            posts_count = await session.scalar(select(func.count(Post.id)))
            
            stats_text = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                f"üìù –ü–æ—Å—Ç–æ–≤: {posts_count}\n"
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ============= –ö–û–ú–ê–ù–î–ê /SAY =============

async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /say command for moderators to send messages to users"""
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /say:**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/say –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/say @john –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`\n"
            "‚Ä¢ `/say 123456789 –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`\n"
            "‚Ä¢ `/say ID_123456789 –ü–æ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏`\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    message = ' '.join(context.args[1:])
    
    target_user_id = None
    
    if target.startswith('@'):
        username = target[1:]
        target_user_id = await get_user_id_by_username(username)
        if not target_user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
    elif target.startswith('ID_'):
        try:
            target_user_id = int(target[3:])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
    elif target.isdigit():
        target_user_id = int(target)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        return
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message[:100]}{'...' if len(message) > 100 else ''}",
            parse_mode='Markdown'
        )
        
        logger.info(f"Moderator {user_id} sent message to {target_user_id}")
        
    except Exception as e:
        error_msg = str(e)
        if "bot was blocked" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        elif "chat not found" in error_msg:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")

# ============= –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ =============

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user or chat ID"""
    chat = update.effective_chat
    user = update.effective_user
    
    text = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± ID:**\n\n"
    text += f"üë§ –í–∞—à ID: `{user.id}`\n"
    
    if chat.type != 'private':
        text += f"üí¨ ID —á–∞—Ç–∞: `{chat.id}`\n"
        text += f"üìù –¢–∏–ø —á–∞—Ç–∞: {chat.type}\n"
        
        if chat.title:
            text += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def whois_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get detailed user information"""
    if not Config.is_moderator(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/whois @username` –∏–ª–∏ `/whois ID`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    target_user_id = None
    
    if target.startswith('@'):
        username = target[1:]
        target_user_id = await get_user_id_by_username(username)
    elif target.isdigit():
        target_user_id = int(target)
    
    if not target_user_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with db.get_session() as session:
            result = await session.execute(select(User).where(User.id == target_user_id))
            user = result.scalar_one_or_none()
            
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            text = f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
            text += f"üÜî ID: `{user.id}`\n"
            text += f"üëã –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            
            if user.username:
                text += f"üìß Username: @{user.username}\n"
            
            if hasattr(user, 'created_at') and user.created_at:
                text += f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if hasattr(user, 'banned') and user.banned:
                text += f"üö´ –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            else:
                text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"Error in whois command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Translate text using Google Translate API"""
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/translate —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`",
            parse_mode='Markdown'
        )
        return
    
    text_to_translate = ' '.join(context.args)
    
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
        await update.message.reply_text(
            f"üîÑ **–ü–µ—Ä–µ–≤–æ–¥:**\n\n"
            f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_to_translate}\n\n"
            f"üåê –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: [–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in translate: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get weather information"""
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/weather –ë—É–¥–∞–ø–µ—à—Ç`",
            parse_mode='Markdown'
        )
        return
    
    city = ' '.join(context.args)
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
        await update.message.reply_text(
            f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}:**\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: [–§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]\n"
            f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: [–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]\n"
            f"üí® –í–µ—Ç–µ—Ä: [–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in weather: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")

# ============= –†–û–ó–´–ì–†–´–® =============

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
lottery_participants = {}

async def join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Join lottery"""
    user_id = update.effective_user.id
    username = update.effective_user.username or f"ID_{user_id}"
    
    if user_id in lottery_participants:
        await update.message.reply_text(
            f"üé≤ @{username}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
        )
        return
    
    lottery_participants[user_id] = {
        'username': username,
        'joined_at': datetime.now()
    }
    
    await update.message.reply_text(
        f"üéâ @{username}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lottery_participants)}"
    )

async def participants_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show lottery participants"""
    if not lottery_participants:
        await update.message.reply_text("üé≤ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return
    
    text = f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ({len(lottery_participants)}):**\n\n"
    
    for i, (user_id, data) in enumerate(lottery_participants.items(), 1):
        text += f"{i}. @{data['username']}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Report a user to moderators"""
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/report @username –ø—Ä–∏—á–∏–Ω–∞`",
            parse_mode='Markdown'
        )
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    reporter = update.effective_user
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    report_text = (
        f"üö® **–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:**\n\n"
        f"üë§ –û—Ç: @{reporter.username or '–±–µ–∑_username'} (ID: {reporter.id})\n"
        f"üéØ –ù–∞: {target}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await context.bot.send_message(
            chat_id=Config.MODERATION_GROUP_ID,
            text=report_text,
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            "‚úÖ **–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
    except Exception as e:
        logger.error(f"Error sending report: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã")

# ============= –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò =============

async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ban user"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ban @username –ø—Ä–∏—á–∏–Ω–∞`")
        return
    
    target = context.args[0]
    reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã —Å –ë–î
    await update.message.reply_text(
        f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"[–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫—É –ë–î]"
    )

async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Unban user"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unban @username`")
        return
    
    target = context.args[0]
    
    await update.message.reply_text(
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"[–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]"
    )

async def admcom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show admin commands"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    text = """üîß **–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´:**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è:**
‚Ä¢ `/ban @user [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äì –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ `/unban @user` ‚Äì —Å–Ω—è—Ç—å –±–∞–Ω
‚Ä¢ `/mute @user [–≤—Ä–µ–º—è]` ‚Äì –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç
‚Ä¢ `/unmute @user` ‚Äì —Å–Ω—è—Ç—å –º—É—Ç
‚Ä¢ `/info @user` ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/say @user —Ç–µ–∫—Å—Ç` ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/broadcast —Ç–µ–∫—Å—Ç` ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
‚Ä¢ `/stats` ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

**–ò–≥—Ä—ã:**
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/admins` ‚Äì —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ `/whois @user` ‚Äì –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""

    await update.message.reply_text(text, parse_mode='Markdown')

# ============= –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

async def get_user_id_by_username(username: str) -> int | None:
    """Find user ID by username"""
    try:
        async with db.get_session() as session:
            result = await session.execute(
                select(User.id).where(User.username == username)
            )
            return result.scalar_one_or_none()
    except Exception as e:
        logger.error(f"Error finding user by username {username}: {e}")
        return None

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if not Config.is_moderator(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    data = query.data.split(":")
    action = data[1] if len(data) > 1 else None
    
    if action == "stats":
        await stats_command(update, context)
    elif action == "broadcast":
        await query.answer("üì¢ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    else:
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Broadcast command placeholder"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await update.message.reply_text("üì¢ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
# –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –§–£–ù–ö–¶–ò–ò –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê handlers/admin_handler.py

# ============= –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–ö–ê–ú–ò =============

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
trix_links = [
    {
        'id': 1,
        'name': '–ö–∞–Ω–∞–ª –ë—É–¥–∞–ø–µ—à—Ç',
        'url': 'https://t.me/snghu',
        'description': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ë—É–¥–∞–ø–µ—à—Ç–∞'
    },
    {
        'id': 2,
        'name': '–ß–∞—Ç –ë—É–¥–∞–ø–µ—à—Ç',
        'url': 'https://t.me/tgchatxxx',
        'description': '–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'
    },
    {
        'id': 3,
        'name': '–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥',
        'url': 'https://t.me/trixvault',
        'description': '–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ë—É–¥–∞–ø–µ—à—Ç–∞'
    },
    {
        'id': 4,
        'name': '–ë–∞—Ä–∞—Ö–æ–ª–∫–∞',
        'url': 'https://t.me/hungarytrade',
        'description': '–ö—É–ø–ª—è, –ø—Ä–æ–¥–∞–∂–∞, –æ–±–º–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤'
    }
]

async def trixlinks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
    if not trix_links:
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç")
        return
    
    text = "üîó **–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò TRIX:**\n\n"
    
    for i, link in enumerate(trix_links, 1):
        text += f"{i}. **{link['name']}**\n"
        text += f"üîó {link['url']}\n"
        text += f"üìù {link['description']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def trixlinksadd_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/trixlinksadd –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ`\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n"
            "`/trixlinksadd \"–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª\" \"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞\"`\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É.",
            parse_mode='Markdown'
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    if len(context.args) == 2:
        name = context.args[0].strip('"')
        description = context.args[1].strip('"')
    else:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        name = context.args[0].strip('"')
        description = ' '.join(context.args[1:]).strip('"')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['trixlinks_adding'] = {
        'name': name,
        'description': description
    }
    context.user_data['waiting_for'] = 'trixlinks_waiting_url'
    
    await update.message.reply_text(
        f"‚úÖ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üîó **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:**\n"
        f"(–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/example)",
        parse_mode='Markdown'
    )

async def trixlinksedit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if not trix_links:
            await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç")
            return
        
        text = "üìù **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–û–ö**\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksedit ID`\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    
    # –ò—â–µ–º —Å—Å—ã–ª–∫—É
    link_to_edit = None
    for link in trix_links:
        if link['id'] == link_id:
            link_to_edit = link
            break
    
    if not link_to_edit:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if len(context.args) >= 3:
        new_name = context.args[1].strip('"')
        new_description = ' '.join(context.args[2:]).strip('"')
        
        link_to_edit['name'] = new_name
        link_to_edit['description'] = new_description
        
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:**\n\n"
            f"üÜî ID: {link_id}\n"
            f"üìù –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_name}\n"
            f"üìã –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link_to_edit['url']}",
            parse_mode='Markdown'
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ
        context.user_data['trixlinks_editing'] = link_id
        context.user_data['waiting_for'] = 'trixlinks_waiting_edit'
        
        await update.message.reply_text(
            f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ID {link_id}:**\n\n"
            f"üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {link_to_edit['name']}\n"
            f"üìã –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {link_to_edit['description']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link_to_edit['url']}\n\n"
            f"**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
            f"`–Ω–∞–∑–≤–∞–Ω–∏–µ | –æ–ø–∏—Å–∞–Ω–∏–µ | —Å—Å—ã–ª–∫–∞`\n\n"
            f"**–ü—Ä–∏–º–µ—Ä:**\n"
            f"`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ | https://t.me/new`",
            parse_mode='Markdown'
        )

async def trixlinksdelete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã"""
    if not Config.is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if not trix_links:
            await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç")
            return
        
        text = "üóëÔ∏è **–£–î–ê–õ–ï–ù–ò–ï –°–°–´–õ–û–ö**\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/trixlinksdelete ID`\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        
        for link in trix_links:
            text += f"{link['id']}. {link['name']}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        return
    
    link_id = int(context.args[0])
    
    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
    link_to_delete = None
    for i, link in enumerate(trix_links):
        if link['id'] == link_id:
            link_to_delete = trix_links.pop(i)
            break
    
    if link_to_delete:
        await update.message.reply_text(
            f"‚úÖ **–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {link_to_delete['name']}\n"
            f"üîó URL: {link_to_delete['url']}\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {link_to_delete['description']}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –°—Å—ã–ª–∫–∞ —Å ID {link_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def handle_trixlinks_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å—Å—ã–ª–æ–∫"""
    waiting_for = context.user_data.get('waiting_for')
    text = update.message.text.strip()
    
    if waiting_for == 'trixlinks_waiting_url':
        # –î–æ–±–∞–≤–ª—è–µ–º URL –∫ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–µ
        adding_data = context.user_data.get('trixlinks_adding')
        
        if not adding_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
