#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è INTEGER –Ω–∞ BIGINT –¥–ª—è Telegram ID
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python migrate_to_bigint.py
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

async def migrate_to_bigint():
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ç–∏–ø—ã ID —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ BIGINT"""
    
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã —Å—Ç–æ–ª–±—Ü–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã ID —Å—Ç–æ–ª–±—Ü–æ–≤
        id_columns = await conn.fetch("""
            SELECT 
                table_name, 
                column_name, 
                data_type,
                is_nullable
            FROM information_schema.columns 
            WHERE table_name IN ('users', 'posts') 
            AND column_name IN ('id', 'user_id')
            ORDER BY table_name, column_name;
        """)
        
        print("üìã –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã ID —Å—Ç–æ–ª–±—Ü–æ–≤:")
        for col in id_columns:
            print(f"  - {col['table_name']}.{col['column_name']}: {col['data_type']}")
        
        print("\nüîß –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫ BIGINT...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        posts_count = await conn.fetchval("SELECT COUNT(*) FROM posts")
        print(f"üìä –ë—É–¥–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {posts_count} –ø–æ—Å—Ç–æ–≤")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        async with conn.transaction():
            try:
                # 1. –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ users.id
                print("üîÑ –ò–∑–º–µ–Ω—è–µ–º users.id –Ω–∞ BIGINT...")
                await conn.execute("ALTER TABLE users ALTER COLUMN id TYPE BIGINT;")
                print("‚úÖ users.id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ BIGINT")
                
                # 2. –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ posts.user_id
                print("üîÑ –ò–∑–º–µ–Ω—è–µ–º posts.user_id –Ω–∞ BIGINT...")
                await conn.execute("ALTER TABLE posts ALTER COLUMN user_id TYPE BIGINT;")
                print("‚úÖ posts.user_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ BIGINT")
                
                print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as migration_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
                raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–µ —Ç–∏–ø—ã ID —Å—Ç–æ–ª–±—Ü–æ–≤:")
        final_columns = await conn.fetch("""
            SELECT 
                table_name, 
                column_name, 
                data_type
            FROM information_schema.columns 
            WHERE table_name IN ('users', 'posts') 
            AND column_name IN ('id', 'user_id')
            ORDER BY table_name, column_name;
        """)
        
        for col in final_columns:
            status = "‚úÖ" if col['data_type'] == 'bigint' else "‚ùå"
            print(f"  {status} {col['table_name']}.{col['column_name']}: {col['data_type']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        final_users = await conn.fetchval("SELECT COUNT(*) FROM users")
        final_posts = await conn.fetchval("SELECT COUNT(*) FROM posts")
        
        print(f"\nüìä –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {final_users} (–±—ã–ª–æ: {users_count})")
        print(f"  –ü–æ—Å—Ç–æ–≤: {final_posts} (–±—ã–ª–æ: {posts_count})")
        
        if final_users == users_count and final_posts == posts_count:
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")
        
        await conn.close()
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è BIGINT –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ Telegram ID")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ï—Å—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã")
        print("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
        print("- –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")

if __name__ == "__main__":
    asyncio.run(migrate_to_bigint())
